<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>dom转PDF方案</title>
      <link href="/2023/09/06/learn/dom%E6%89%93%E5%8D%B0PDF%E6%96%B9%E6%A1%88/"/>
      <url>/2023/09/06/learn/dom%E6%89%93%E5%8D%B0PDF%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="dom-转-PDF-方案"><a href="#dom-转-PDF-方案" class="headerlink" title="dom 转 PDF 方案"></a>dom 转 PDF 方案</h1><h3 id="全局打印"><a href="#全局打印" class="headerlink" title="全局打印"></a>全局打印</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">print</span>();</span><br></pre></td></tr></table></figure><h3 id="iframe-打开-dom-元素"><a href="#iframe-打开-dom-元素" class="headerlink" title="iframe 打开 dom 元素"></a>iframe 打开 dom 元素</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">printElement</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> ifr = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;iframe&quot;</span>);</span><br><span class="line">  ifr.<span class="property">style</span> = <span class="string">&quot;height: 0px; width: 0px; position: absolute&quot;</span>;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(ifr);</span><br><span class="line">  ifr.<span class="property">contentDocument</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(e.<span class="title function_">cloneNode</span>(<span class="literal">true</span>));</span><br><span class="line">  ifr.<span class="property">contentWindow</span>.<span class="title function_">print</span>();</span><br><span class="line"></span><br><span class="line">  ifr.<span class="property">parentElement</span>.<span class="title function_">removeChild</span>(ifr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> style = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;style&quot;</span>);</span><br><span class="line">style.<span class="property">innerText</span> = <span class="string">&quot;* &#123; color: red; &#125;&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> img = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;img&quot;</span>);</span><br><span class="line">img.<span class="property">height</span> = <span class="number">300</span>;</span><br><span class="line">img.<span class="property">width</span> = <span class="number">300</span>;</span><br><span class="line">img.<span class="property">src</span> = <span class="string">&quot;https://www.baidu.com/img/PCtm_d9c8750bed0b3c7d089fa7d55720d6cf.png&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">div.<span class="property">innerText</span> = <span class="string">&quot;这是百度网站&quot;</span>;</span><br><span class="line">div.<span class="title function_">appendChild</span>(style);</span><br><span class="line">div.<span class="title function_">appendChild</span>(img);</span><br><span class="line"><span class="title function_">printElement</span>(div);</span><br></pre></td></tr></table></figure><h3 id="js-库"><a href="#js-库" class="headerlink" title="js 库"></a>js 库</h3><ul><li>jsPdf</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 控制台执行第一段</span></span><br><span class="line"><span class="keyword">var</span> jspdfScript = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;script&quot;</span>);</span><br><span class="line">jspdfScript.<span class="property">src</span> = <span class="string">&quot;https://unpkg.com/jspdf@latest/dist/jspdf.umd.min.js&quot;</span>;</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">append</span>(jspdfScript);</span><br><span class="line"><span class="keyword">var</span> html2canvasScript = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;script&quot;</span>);</span><br><span class="line">html2canvasScript.<span class="property">src</span> =</span><br><span class="line">  <span class="string">&quot;https://html2canvas.hertzen.com/dist/html2canvas.min.js&quot;</span>;</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">append</span>(html2canvasScript);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等 js 加载完成, 控制台执行第二段</span></span><br><span class="line"><span class="comment">// $0 是调试工具选中的元素, 没有使用过的话, 可以直接控制台打印看看 $0 是啥</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">jsPDF</span> = jspdf.<span class="property">jsPDF</span>;</span><br><span class="line"><span class="keyword">var</span> doc = <span class="keyword">new</span> <span class="title function_">jsPDF</span>();</span><br><span class="line">doc.<span class="title function_">html</span>($0, &#123;</span><br><span class="line">  <span class="attr">callback</span>: <span class="keyword">function</span> (<span class="params">doc</span>) &#123;</span><br><span class="line">    doc.<span class="title function_">save</span>(<span class="string">&quot;sample-document.pdf&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">x</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">y</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">width</span>: <span class="number">170</span>,</span><br><span class="line">  <span class="attr">windowWidth</span>: <span class="number">1650</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>jspdf + html2Canvas</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 控制台执行第一段</span></span><br><span class="line"><span class="keyword">var</span> jspdfScript = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;script&quot;</span>);</span><br><span class="line">jspdfScript.<span class="property">src</span> = <span class="string">&quot;https://unpkg.com/jspdf@latest/dist/jspdf.umd.min.js&quot;</span>;</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">append</span>(jspdfScript);</span><br><span class="line"><span class="keyword">var</span> html2canvasScript = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;script&quot;</span>);</span><br><span class="line">html2canvasScript.<span class="property">src</span> =</span><br><span class="line">  <span class="string">&quot;https://html2canvas.hertzen.com/dist/html2canvas.min.js&quot;</span>;</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">append</span>(html2canvasScript);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等 js 加载完成, 控制台执行第二段</span></span><br><span class="line"><span class="comment">// $0 是调试工具选中的元素, 没有使用过的话, 可以直接控制台打印看看 $0 是啥</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">jsPDF</span> = jspdf.<span class="property">jsPDF</span>;</span><br><span class="line"><span class="title function_">html2canvas</span>($0).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">canvas</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> max = &#123; <span class="attr">height</span>: <span class="number">300</span> - <span class="number">40</span> * <span class="number">2</span>, <span class="attr">width</span>: <span class="number">210</span> - <span class="number">15</span> * <span class="number">2</span> &#125;;</span><br><span class="line">  <span class="keyword">var</span> doc = <span class="keyword">new</span> <span class="title function_">jsPDF</span>(<span class="string">&quot;p&quot;</span>, <span class="string">&quot;mm&quot;</span>, <span class="string">&quot;a2&quot;</span>);</span><br><span class="line">  <span class="keyword">var</span> height = canvas.<span class="property">height</span>;</span><br><span class="line">  <span class="keyword">var</span> width = canvas.<span class="property">width</span>;</span><br><span class="line">  <span class="keyword">var</span> ratio = canvas.<span class="property">height</span> / canvas.<span class="property">width</span>;</span><br><span class="line">  <span class="keyword">if</span> (height &gt; max.<span class="property">height</span>) &#123;</span><br><span class="line">    <span class="comment">// 先调整高</span></span><br><span class="line">    height = max.<span class="property">height</span>;</span><br><span class="line">    width = height * (<span class="number">1</span> / ratio);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (width &gt; max.<span class="property">width</span>) &#123;</span><br><span class="line">    <span class="comment">// 再调整宽</span></span><br><span class="line">    width = max.<span class="property">width</span>;</span><br><span class="line">    height = width * ratio;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 最后宽高都是合适的</span></span><br><span class="line">  doc.<span class="title function_">addImage</span>(canvas, <span class="string">&quot;PNG&quot;</span>, <span class="number">15</span>, <span class="number">40</span>, width, height);</span><br><span class="line">  doc.<span class="title function_">save</span>(<span class="string">&quot;sample-document.pdf&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 个人学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nextTick 原理</title>
      <link href="/2023/09/06/vue/nextTick/"/>
      <url>/2023/09/06/vue/nextTick/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="nextTick-原理"><a href="#nextTick-原理" class="headerlink" title="nextTick 原理"></a>nextTick 原理</h1><p>Vue 的<code>nextTick</code>是一个非常重要的 API，它允许你延迟一段代码的执行直到下一次 DOM 更新周期。这对于在数据改变后立即操作 DOM 非常有用。</p><p>关于其原理，Vue 使用了一个异步队列来控制所有观察者（watchers）的更新。当某个观察者被触发时，它会被添加到这个异步队列中。然后，在下一个 tick 时，Vue 会清空整个队列并执行所有存储在其中的观察者。</p><p>为了实现这种异步机制，Vue 尝试使用原生 Promise、MutationObserver 和 setImmediate 等最新 APIs。只有当环境不支持这些 APIs 时才会回退到 setTimeout。</p><p>先用 Promise.then()方法实现一下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> callbacks = [];</span><br><span class="line"><span class="keyword">let</span> pending = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">flushCallbacks</span>(<span class="params"></span>) &#123;</span><br><span class="line">  pending = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">const</span> copies = callbacks.<span class="title function_">slice</span>(<span class="number">0</span>);</span><br><span class="line">  callbacks.<span class="property">length</span> = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; copies.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    copies[i]();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">nextTick</span>(<span class="params">cb</span>) &#123;</span><br><span class="line">  callbacks.<span class="title function_">push</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (cb) <span class="title function_">cb</span>();</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!pending) &#123;</span><br><span class="line">    pending = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="title class_">Promise</span> !== <span class="string">&quot;undefined&quot;</span>) &#123;</span><br><span class="line">      <span class="comment">// 如果环境支持Promise</span></span><br><span class="line">      <span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(flushCallbacks);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 如果环境不支持Promise，则回退到setTimeout</span></span><br><span class="line">      <span class="built_in">setTimeout</span>(flushCallbacks, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体来说：</p><ol><li>首选 Promise.then()方法。</li><li>如果环境不支持 Promise，则选择 MutationObserver。</li><li>如果还不支持 MutationObserver，则选择 setImmediate。</li><li>最后如果都不支持，则使用 setTimeout。</li></ol><p>以上就是<code>nextTick</code>的基本原理：通过异步队列确保代码在下一次 DOM 更新周期之后运行，并通过多种方式尝试实现该功能以适应各种环境。</p><p>完整按照上述顺序实现一下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> callbacks = [];</span><br><span class="line"><span class="keyword">let</span> pending = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">flushCallbacks</span>(<span class="params"></span>) &#123;</span><br><span class="line">  pending = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">const</span> copies = callbacks.<span class="title function_">slice</span>(<span class="number">0</span>);</span><br><span class="line">  callbacks.<span class="property">length</span> = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; copies.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    copies[i]();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 异步方法选择器</span></span><br><span class="line"><span class="keyword">let</span> timerFunc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="title class_">Promise</span> !== <span class="string">&quot;undefined&quot;</span>) &#123;</span><br><span class="line">  <span class="comment">// 如果环境支持Promise</span></span><br><span class="line">  <span class="keyword">const</span> p = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>();</span><br><span class="line">  timerFunc = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    p.<span class="title function_">then</span>(flushCallbacks);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="title class_">MutationObserver</span> !== <span class="string">&quot;undefined&quot;</span>) &#123;</span><br><span class="line">  <span class="comment">// 如果环境不支持Promise，但支持MutationObserver</span></span><br><span class="line">  <span class="keyword">let</span> counter = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">const</span> observer = <span class="keyword">new</span> <span class="title class_">MutationObserver</span>(flushCallbacks);</span><br><span class="line">  <span class="keyword">const</span> textNode = <span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(<span class="title class_">String</span>(counter));</span><br><span class="line"></span><br><span class="line">  observer.<span class="title function_">observe</span>(textNode, &#123;</span><br><span class="line">    <span class="attr">characterData</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  timerFunc = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    counter += <span class="number">1</span>;</span><br><span class="line">    textNode.<span class="property">data</span> = <span class="title class_">String</span>(counter % <span class="number">2</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> setImmediate !== <span class="string">&quot;undefined&quot;</span>) &#123;</span><br><span class="line">  <span class="comment">// 如果环境不支持Promise和MutationObserver，但支持setImmediate</span></span><br><span class="line">  timerFunc = <span class="function">() =&gt;</span> <span class="title function_">setImmediate</span>(flushCallbacks);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// 最后如果都不支持，则使用setTimeout</span></span><br><span class="line">  timerFunc = <span class="function">() =&gt;</span> <span class="built_in">setTimeout</span>(flushCallbacks, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">nextTick</span>(<span class="params">cb</span>) &#123;</span><br><span class="line">  callbacks.<span class="title function_">push</span>(<span class="function">() =&gt;</span> cb &amp;&amp; <span class="title function_">cb</span>());</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!pending) &#123;</span><br><span class="line">    pending = <span class="literal">true</span>;</span><br><span class="line">    <span class="title function_">timerFunc</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这个实现更接近 Vue.js 中真正的 nextTick。注意在使用 Mutation Observer 时，我们观察了一个文本节点并通过改变它来触发回调。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue3实现水印方案</title>
      <link href="/2023/09/06/learn/vue3%E5%AE%9E%E7%8E%B0%E6%B0%B4%E5%8D%B0%E6%96%B9%E6%A1%88/"/>
      <url>/2023/09/06/learn/vue3%E5%AE%9E%E7%8E%B0%E6%B0%B4%E5%8D%B0%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="vue3-实现水印方案"><a href="#vue3-实现水印方案" class="headerlink" title="vue3 实现水印方案"></a>vue3 实现水印方案</h1><ul><li>生成 canvas 图片</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; computed &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">useWatermarkBg</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">computed</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 创建一个 canvas</span></span><br><span class="line">    <span class="keyword">const</span> canvas = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;canvas&quot;</span>);</span><br><span class="line">    <span class="keyword">const</span> devicePixelRatio = <span class="variable language_">window</span>.<span class="property">devicePixelRatio</span> || <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 设置字体大小</span></span><br><span class="line">    <span class="keyword">const</span> fontSize = props.<span class="property">fontSize</span> * devicePixelRatio;</span><br><span class="line">    <span class="keyword">const</span> font = fontSize + <span class="string">&quot;px serif&quot;</span>;</span><br><span class="line">    <span class="keyword">const</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line">    <span class="comment">// 获取文字宽度</span></span><br><span class="line">    ctx.<span class="property">font</span> = font;</span><br><span class="line">    <span class="keyword">const</span> &#123; width &#125; = ctx.<span class="title function_">measureText</span>(props.<span class="property">text</span>);</span><br><span class="line">    <span class="keyword">const</span> canvasSize = <span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="number">100</span>, width) + props.<span class="property">gap</span> * devicePixelRatio;</span><br><span class="line">    canvas.<span class="property">width</span> = canvasSize;</span><br><span class="line">    canvas.<span class="property">height</span> = canvasSize;</span><br><span class="line">    ctx.<span class="title function_">translate</span>(canvas.<span class="property">width</span> / <span class="number">2</span>, canvas.<span class="property">height</span> / <span class="number">2</span>);</span><br><span class="line">    <span class="comment">// 旋转 45 度让文字变倾斜</span></span><br><span class="line">    ctx.<span class="title function_">rotate</span>((<span class="title class_">Math</span>.<span class="property">PI</span> / <span class="number">180</span>) * -<span class="number">45</span>);</span><br><span class="line">    ctx.<span class="property">fillStyle</span> = <span class="string">&quot;rgba(0, 0, 0, 0.3)&quot;</span>;</span><br><span class="line">    ctx.<span class="property">font</span> = font;</span><br><span class="line">    ctx.<span class="property">textAlign</span> = <span class="string">&quot;center&quot;</span>;</span><br><span class="line">    ctx.<span class="property">textBaseline</span> = <span class="string">&quot;middle&quot;</span>;</span><br><span class="line">    <span class="comment">// 将文字画出来</span></span><br><span class="line">    ctx.<span class="title function_">fillText</span>(props.<span class="property">text</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">base64</span>: canvas.<span class="title function_">toDataURL</span>(),</span><br><span class="line">      <span class="attr">size</span>: canvasSize,</span><br><span class="line">      <span class="attr">styleSize</span>: canvasSize / devicePixelRatio,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>用 MutationObserver api 监听删除和修改属性，重新生成水印</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;watermark-container&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;parentRef&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 我们要做的就是在这里添加一个 div，填充满整个区域，设置水印背景并且重复 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref, watchEffect, onMounted, onUnmounted &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> useWatermarkBg <span class="keyword">from</span> <span class="string">&quot;./useWatermarkBg&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 定义一些基本的属性（ 如果说你想开发的更加完善，可以加入更多的属性来适应你的要求 ）</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> props = <span class="title function_">defineProps</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">text</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 传入水印的文本</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">type</span>: <span class="title class_">String</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">required</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">default</span>: <span class="string">&quot;watermark&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">fontSize</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 字体的大小</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">type</span>: <span class="title class_">Number</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">default</span>: <span class="number">40</span>,</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">gap</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 水印重复的间隔</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">type</span>: <span class="title class_">Number</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">default</span>: <span class="number">20</span>,</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 将属性传递进去就返回个创建好的对象</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// useWatermarkBg 函数用来创建一个 canvas 图片</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> bg = <span class="title function_">useWatermarkBg</span>(props);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> parentRef = <span class="title function_">ref</span>(<span class="literal">null</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> flag = <span class="title function_">ref</span>(<span class="number">0</span>); <span class="comment">// 声明一个依赖</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 将 div 保存在外部因为要判断节点时使用</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> div;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">watchEffect</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  flag.<span class="property">value</span>; <span class="comment">// 将依赖放在 watchEffect 里</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">if</span> (!parentRef.<span class="property">value</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span>;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 判断之前的节点是否有内容，如果有的话删除</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">if</span> (div) &#123;</span></span><br><span class="line"><span class="language-javascript">    div.<span class="title function_">remove</span>();</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> &#123; base64, styleSize &#125; = bg.<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">  div = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">  div.<span class="property">style</span>.<span class="property">backgroundImage</span> = <span class="string">`url(<span class="subst">$&#123;base64&#125;</span>)`</span>;</span></span><br><span class="line"><span class="language-javascript">  div.<span class="property">style</span>.<span class="property">backgroundSize</span> = <span class="string">`<span class="subst">$&#123;styleSize&#125;</span>px <span class="subst">$&#123;styleSize&#125;</span>px`</span>;</span></span><br><span class="line"><span class="language-javascript">  div.<span class="property">style</span>.<span class="property">backgroundRepeat</span> = <span class="string">&quot;repeat&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">  div.<span class="property">style</span>.<span class="property">inset</span> = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">  div.<span class="property">style</span>.<span class="property">zIndex</span> = <span class="number">9999</span>;</span></span><br><span class="line"><span class="language-javascript">  div.<span class="property">style</span>.<span class="property">position</span> = <span class="string">&quot;absolute&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">  div.<span class="property">style</span>.<span class="property">pointerEvents</span> = <span class="string">&quot;none&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">  parentRef.<span class="property">value</span>.<span class="title function_">appendChild</span>(div);</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> ob;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 在 onMounted 里边创建一个 MutationObserver 来进行监控</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 一旦某个东西有变化就会运行这个回调函数</span></span></span><br><span class="line"><span class="language-javascript">  ob = <span class="keyword">new</span> <span class="title class_">MutationObserver</span>(<span class="function">(<span class="params">records</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 并把变化记录下来传递给我们</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;records &gt;&gt;&gt; &quot;</span>, records);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">for</span> (<span class="keyword">const</span> record <span class="keyword">of</span> records) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 如果有节点被删除，循环一下判断是否有水印的节点</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">for</span> (<span class="keyword">const</span> dom <span class="keyword">of</span> record.<span class="property">removedNodes</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (dom === div) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;水印被删除&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">          flag.<span class="property">value</span>++; <span class="comment">// 删除节点的时候更新依赖</span></span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 如果有节点被修改，判断一下是否是水印的节点</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">if</span> (record.<span class="property">target</span> === div) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;属性被修改&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        flag.<span class="property">value</span>++; <span class="comment">// 修改属性的时候更新依赖</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span>;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 创建好监听器之后，告诉监听器需要监听的元素</span></span></span><br><span class="line"><span class="language-javascript">  ob.<span class="title function_">observe</span>(parentRef.<span class="property">value</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 监听的时候需要加一些配置</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">childList</span>: <span class="literal">true</span>, <span class="comment">// 元素内容有没有发生变化</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">attributes</span>: <span class="literal">true</span>, <span class="comment">// 元素本身的属性有没有发生变化</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">subtree</span>: <span class="literal">true</span>, <span class="comment">// 告诉它监控的是整个子树，就是包含整个子元素</span></span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 在组件卸载的时候取消监听</span></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">onUnmounted</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  ob &amp;&amp; ob.<span class="title function_">disconnect</span>(); <span class="comment">// 取消监听</span></span></span><br><span class="line"><span class="language-javascript">  div = <span class="literal">null</span>; <span class="comment">// 因为 div 是全局变量在写在的时候值为空</span></span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>使用</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Watermark</span> <span class="attr">text</span>=<span class="string">&quot;版权不能侵犯&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Watermark</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">Watermark</span> <span class="keyword">from</span> <span class="string">&quot;./components/Watermark.vue&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&quot;App&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Watermark</span>,</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 个人学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript console方法</title>
      <link href="/2023/09/06/util/console/"/>
      <url>/2023/09/06/util/console/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="JavaScript-console-方法"><a href="#JavaScript-console-方法" class="headerlink" title="JavaScript console 方法"></a>JavaScript console 方法</h1><h3 id="1-table"><a href="#1-table" class="headerlink" title="1. table()"></a>1. table()</h3><p><img src="/../../images/util/image.png" alt="Alt text"></p><h3 id="2-assert"><a href="#2-assert" class="headerlink" title="2. assert()"></a>2. assert()</h3><p>console.assert() 非常适合调试目的，它接收断言，并在断言为 false 时向控制台写入错误信息。但如果是 true ，则不会发生任何事情:</p><p><img src="/../../images/util/image-1.png" alt="Alt text"></p><h3 id="3-trace"><a href="#3-trace" class="headerlink" title="3. trace()"></a>3. trace()</h3><p>console.trace() 可以帮助您在调用它的位置输出当前堆栈跟踪。例如</p><p><img src="/../../images/util/image-2.png" alt="Alt text"></p><h3 id="4-error"><a href="#4-error" class="headerlink" title="4. error()"></a>4. error()</h3><p><img src="/../../images/util/image-3.png" alt="Alt text"></p><h3 id="5-warn"><a href="#5-warn" class="headerlink" title="5. warn()"></a>5. warn()</h3><p><img src="/../../images/util/image-4.png" alt="Alt text"></p><h3 id="6-count-和-countReset"><a href="#6-count-和-countReset" class="headerlink" title="6. count() 和 countReset()"></a>6. count() 和 countReset()</h3><p><img src="/../../images/util/image-5.png" alt="Alt text"></p><p><img src="/../../images/util/image-6.png" alt="Alt text"></p><blockquote><p>countReset() 方法将标签的计数设回零。</p></blockquote><p><img src="/../../images/util/image-7.png" alt="Alt text"></p><h3 id="7-time-timeEnd-and-timeLog"><a href="#7-time-timeEnd-and-timeLog" class="headerlink" title="7. time(), timeEnd(), and timeLog()"></a>7. time(), timeEnd(), and timeLog()</h3><p><img src="/../../images/util/image-8.png" alt="Alt text"></p><h3 id="8-clear"><a href="#8-clear" class="headerlink" title="8. clear()"></a>8. clear()</h3><p>console.clear() 通过清除日志来清除控制台中的杂乱信息。</p><h3 id="9-group-groupCollapsed-and-groupEnd"><a href="#9-group-groupCollapsed-and-groupEnd" class="headerlink" title="9. group(), groupCollapsed(), and groupEnd()"></a>9. group(), groupCollapsed(), and groupEnd()</h3><p><img src="/../../images/util/image-9.png" alt="Alt text"></p><p><img src="/../../images/util/image-10.png" alt="Alt text"></p><h3 id="10-dir"><a href="#10-dir" class="headerlink" title="10. dir()"></a>10. dir()</h3><p><img src="/../../images/util/image-11.png" alt="Alt text"></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>性能方案分析</title>
      <link href="/2023/09/06/learn/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E5%88%86%E6%9E%90/"/>
      <url>/2023/09/06/learn/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="Network-分析"><a href="#Network-分析" class="headerlink" title="Network 分析"></a>Network 分析</h3><p>通过对接口的请求时间及调用次数进行优化</p><p><img src="/.com//image.png" alt="Alt text"></p><h3 id="Lighthouse-分析"><a href="#Lighthouse-分析" class="headerlink" title="Lighthouse 分析"></a>Lighthouse 分析</h3><p>优化点逐一进行优化</p><p><img src="/.com//image-1.png" alt="Alt text"></p><h3 id="Performance-分析"><a href="#Performance-分析" class="headerlink" title="Performance 分析"></a>Performance 分析</h3><p>性能分析工具就比较复杂了，需要具体通过某一段时间内页面交互的运行情况，有明显卡顿现象，对右上角红色三角的长任务代码进行优化</p><p><img src="/.com//image-2.png" alt="Alt text"></p><h3 id="chunk-分析"><a href="#chunk-分析" class="headerlink" title="chunk 分析"></a>chunk 分析</h3><p>通过分析打包体积来尽可能减少打包后体积</p><p><img src="/.com//image-3.png" alt="Alt text"></p><h3 id="具体怎么优化呢？"><a href="#具体怎么优化呢？" class="headerlink" title="具体怎么优化呢？"></a>具体怎么优化呢？</h3><h4 id="路由懒加载"><a href="#路由懒加载" class="headerlink" title="路由懒加载"></a>路由懒加载</h4><p>SPA 项目，一个路由对应一个页面，如果不做处理，项目打包后，会把所有页面打包成一个文件，当用户打开首页时，会一次性加载所有的资源，造成首页加载很慢，降低用户体验</p><h4 id="组件懒加载"><a href="#组件懒加载" class="headerlink" title="组件懒加载"></a>组件懒加载</h4><p>除了路由的懒加载外，组件的懒加载在很多场景下也有重要的作用</p><p>举个 🌰：比如弹窗组件 A 页面和 b 页面都引用了弹窗组件 此时项目打包后发现会重复引用弹窗组件</p><p>当用户打开 home 页时，会一次性加载该页面所有的资源，我们期望的是用户触发按钮后，再加载该弹框组件的资源</p><p>这种场景下，就很适合用懒加载的方式引入</p><p>弹框组件懒加载：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">dialogInfo</span> = (<span class="params"></span>) =&gt; <span class="title function_">import</span>(<span class="comment">/* webpackChunkName: &quot;dialogInfo&quot; */</span></span><br><span class="line">  <span class="string">&#x27;src/components/dialogInfo&#x27;</span>);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>重新打包后，当用户点击按钮时，才会去加载 dialogInfo.js 和 dialogInfo.css</p><h4 id="组件懒加载的使用场景"><a href="#组件懒加载的使用场景" class="headerlink" title="组件懒加载的使用场景"></a>组件懒加载的使用场景</h4><p>有时资源拆分的过细也不好，可能会造成浏览器 http 请求的增多<br>总结出三种适合组件懒加载的场景：<br>1）该页面的 JS 文件体积大，导致页面打开慢，可以通过组件懒加载进行资源拆分，利用浏览器并行下载资源，提升下载速度（比如首页）<br>2）该组件不是一进入页面就展示，需要一定条件下才触发（比如弹框组件）<br>3）该组件复用性高，很多页面都有引入，利用组件懒加载抽离出该组件，一方面可以很好利用缓存，同时也可以减少页面的 JS 文件大小（比如表格组件、图形组件等）</p><h4 id="对于图片资源"><a href="#对于图片资源" class="headerlink" title="对于图片资源"></a>对于图片资源</h4><p>图片压缩、每次使用在线服务手动压缩较为麻烦，可以直接在构建流程中加入压缩图片</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// install</span><br><span class="line">npm i image-webpack-loader -D</span><br><span class="line">rules: [</span><br><span class="line">    &#123;</span><br><span class="line">    test: /.(jpe?g|png|gif|svg)$/i,</span><br><span class="line">    type: &#x27;asset/resource&#x27;,</span><br><span class="line">    generator: &#123;</span><br><span class="line">        filename: &#x27;images/[name].[contenthash:8].[ext]&#x27;,</span><br><span class="line">    &#125;,</span><br><span class="line">    use: [</span><br><span class="line">        &#123;</span><br><span class="line">        loader: &#x27;image-webpack-loader&#x27;,</span><br><span class="line">        &#125;,</span><br><span class="line">    ],</span><br></pre></td></tr></table></figure><h4 id="JS-的-6-种加载方式"><a href="#JS-的-6-种加载方式" class="headerlink" title="JS 的 6 种加载方式"></a>JS 的 6 种加载方式</h4><ol><li><p>正常模式<br>这种情况下 JS 会阻塞 DOM 渲染，浏览器必须等待 index.js 加载和执行完成后才能去做其它事情</p></li><li><p>async 模式</p></li></ol><p>async 模式下，它的加载是异步的，JS 不会阻塞 DOM 的渲染， 加载是无顺序的，当它加载结束，JS 会立即执行</p><p>使用场景：若该 JS 资源与 DOM 元素没有依赖关系，也不会产生其他资源所需要的数据时，可以使用 async 模式，比如埋点统计、广告等</p><ol start="3"><li>defer 模式</li></ol><p>defer 模式下，JS 的加载也是异步的也不会阻塞 DOM 的渲染，defer 资源会在 DOMContentLoaded 执行之前，并且 defer 是有顺序的加载</p><p>如果有多个设置了 defer 的 script 标签存在，则会按照引入的前后顺序执行，即便是后面的 script 资源先返回</p><p>所以 defer 可以用来控制 JS 文件的执行顺序，比如 antd.js 和 react.js，因为 antd.js 依赖于 react.js，所以必须先引入 react.js，再引入 antd.js</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">defer</span> <span class="attr">src</span>=<span class="string">&quot;react.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">defer</span> <span class="attr">src</span>=<span class="string">&quot;antd.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>module 模式</li></ol><p>在主流的现代浏览器中，script 标签的属性可以加上 type&#x3D;”module”，浏览器会对其内部的 import 引用发起 HTTP 请求，获取模块内容。这时 script 的行为会像是 defer 一样，在后台下载，并且等待 DOM 解析</p><ol start="5"><li>preload 预加载</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;preload&quot;</span> <span class="attr">as</span>=<span class="string">&quot;script&quot;</span> <span class="attr">href</span>=<span class="string">&quot;index.js&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>表示用户十分有可能需要在当前浏览中加载目标资源，所以浏览器必须预先获取和缓存对应资源。</p><p>preload 加载的资源是在浏览器渲染机制之前进行处理的，并且不会阻塞 onload 事件；<br>  <br>preload 加载的 JS 脚本其加载和执行的过程是分离的，即 preload 会预加载相应的脚本代码，待到需要时自行调用</p><ol start="6"><li>Prefetch预请求</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;prefetch&quot;</span> <span class="attr">as</span>=<span class="string">&quot;script&quot;</span> <span class="attr">href</span>=<span class="string">&quot;index.js&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>prefetch 是利用浏览器的空闲时间，加载页面将来可能用到的资源的一种机制；通常可以用于加载其他页面（非首页）所需要的资源，以便加快后续页面的打开速度</p><h4 id="Web-Worker-优化长任务"><a href="#Web-Worker-优化长任务" class="headerlink" title="Web Worker 优化长任务"></a>Web Worker 优化长任务</h4><p>在HTML5的新规范中，实现了 Web Worker 来引入 js 的 “多线程” 技术, 可以让我们在页面主运行的 js 线程中，加载运行另外单独的一个或者多个 js 线程</p><p>由于浏览器 GUI 渲染线程与 JS 引擎线程是互斥的关系，当页面中有很多长任务时，会造成页面 UI 阻塞，出现界面卡顿、掉帧等情况</p><ul><li>计算时长 超过多长时间 适合用Web Worker</li></ul><p>原则上，运算时间超过50ms会造成页面卡顿，属于Long task，这种情况就可以考虑使用Web Worker</p><p>但还要先考虑通信时长的问题</p><p>假如一个运算执行时长为100ms, 但是通信时长为300ms, 用了Web Worker可能会更慢</p><p>一句话： Web Worker专门处理复杂计算的，从此让前端拥有后端的计算能力</p><h4 id="虚拟滚动"><a href="#虚拟滚动" class="headerlink" title="虚拟滚动"></a>虚拟滚动</h4><p>虚拟滚动基本原理：</p><p>计算出 totalHeight 列表总高度，并在触发时滚动事件时根据 scrollTop 值不断更新 startIndex 以及 endIndex ，以此从列表数据 listData 中截取对应元素</p>]]></content>
      
      
      <categories>
          
          <category> 性能优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 性能优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-next-min框架雏形搭建</title>
      <link href="/2023/08/01/Vue3%E6%B7%B1%E5%85%A5/%E6%A1%86%E6%9E%B6%E9%9B%8F%E5%BD%A2%E6%90%AD%E5%BB%BA/"/>
      <url>/2023/08/01/Vue3%E6%B7%B1%E5%85%A5/%E6%A1%86%E6%9E%B6%E9%9B%8F%E5%BD%A2%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="packages-目录结构介绍"><a href="#packages-目录结构介绍" class="headerlink" title="packages 目录结构介绍"></a>packages 目录结构介绍</h3><ul><li>compiler-core： 编辑器核心</li><li>compiler-dom：浏览器部分编辑器模块</li><li>reactivity：响应式核心</li><li>runtime-core：运行时核心</li><li>runtime-dom：浏览器部分运行时模块</li><li>shared：公共方法文件</li></ul><blockquote><p>每个文件对应入口均为 src&#x2F;index.ts</p></blockquote><h3 id="package-json-配置"><a href="#package-json-配置" class="headerlink" title="package.json 配置"></a>package.json 配置</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vue-next-mini&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;index.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;rollup -c&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;keywords&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;license&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ISC&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;devDependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;@rollup/plugin-commonjs&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^22.0.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;@rollup/plugin-node-resolve&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^13.3.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;@rollup/plugin-typescript&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^8.3.4&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;rollup&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.79.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;tslib&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.4.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;typescript&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.7.4&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="typescript-json-配置"><a href="#typescript-json-配置" class="headerlink" title="typescript.json 配置"></a>typescript.json 配置</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="comment">// 编辑器配置</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">// 根目录</span></span><br><span class="line">    <span class="attr">&quot;rootDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;.&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 严格模式标志</span></span><br><span class="line">    <span class="attr">&quot;strict&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 指定类型脚本如何从给定的模块说明符查找文件</span></span><br><span class="line">    <span class="attr">&quot;moduleResolution&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;esModuleInterop&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// JS 语言版本</span></span><br><span class="line">    <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;es5&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 允许未读取局部变量</span></span><br><span class="line">    <span class="attr">&quot;noUnusedLocals&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 允许未读取的参数</span></span><br><span class="line">    <span class="attr">&quot;noUnusedParameters&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 运行解析 json</span></span><br><span class="line">    <span class="attr">&quot;resolveJsonModule&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 支持语法跌代</span></span><br><span class="line">    <span class="attr">&quot;downlevelIteration&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 允许使用隐式的 any 类型</span></span><br><span class="line">    <span class="attr">&quot;noImplicitAny&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 模块化</span></span><br><span class="line">    <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;esnext&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 转换为 JavaScript 时从 typescript 文件中删除所有注释</span></span><br><span class="line">    <span class="attr">&quot;removeComments&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 禁用sourceMMap</span></span><br><span class="line">    <span class="attr">&quot;sourceMap&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lib&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;esnext&quot;</span><span class="punctuation">,</span> <span class="string">&quot;dom&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 设置快捷导入</span></span><br><span class="line">    <span class="attr">&quot;baseUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;.&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;paths&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;@vue/*&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;packages/*/src&quot;</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// 入口</span></span><br><span class="line">  <span class="attr">&quot;include&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;packages/*/src&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="rollup-config-js-配置"><a href="#rollup-config-js-配置" class="headerlink" title="rollup.config.js 配置"></a>rollup.config.js 配置</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> resolve <span class="keyword">from</span> <span class="string">&quot;@rollup/plugin-node-resolve&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> commonjs <span class="keyword">from</span> <span class="string">&quot;@rollup/plugin-commonjs&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> typescript <span class="keyword">from</span> <span class="string">&quot;@rollup/plugin-typescript&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// 入口文件</span></span><br><span class="line">    <span class="attr">input</span>: <span class="string">&quot;packages/vue/src/index.ts&quot;</span>,</span><br><span class="line">    <span class="comment">// 打包出口</span></span><br><span class="line">    <span class="attr">output</span>: [</span><br><span class="line">      <span class="comment">// 导出iife模式的包</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 开启sourceMap</span></span><br><span class="line">        <span class="attr">sourcemap</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="comment">// 导出文件地址</span></span><br><span class="line">        <span class="attr">file</span>: <span class="string">&quot;./packages/vue/dist/vue.js&quot;</span>,</span><br><span class="line">        <span class="comment">// 生成包的格式</span></span><br><span class="line">        <span class="attr">format</span>: <span class="string">&quot;iife&quot;</span>,</span><br><span class="line">        <span class="comment">// 变量名</span></span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;Vue&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">// 插件</span></span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">      <span class="comment">// ts</span></span><br><span class="line">      <span class="title function_">typescript</span>(&#123;</span><br><span class="line">        <span class="attr">sourceMap</span>: <span class="literal">true</span>,</span><br><span class="line">      &#125;),</span><br><span class="line">      <span class="comment">// 模块导入的路径补全</span></span><br><span class="line">      <span class="title function_">resolve</span>(),</span><br><span class="line">      <span class="comment">// 转 commonjs 为 ESM</span></span><br><span class="line">      <span class="title function_">commonjs</span>(),</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><blockquote><p>线上项目地址：<a href="https://github.com/kangkang123269/vue-next-mini">https://github.com/kangkang123269/vue-next-mini</a><br>学习链接：<a href="https://pan.baidu.com/s/1nDmBSulp1SxRoMef2QYspw?pwd=6666">https://pan.baidu.com/s/1nDmBSulp1SxRoMef2QYspw?pwd=6666</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Vue深入 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue深入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue3的一些基本概念</title>
      <link href="/2023/07/31/Vue3%E6%B7%B1%E5%85%A5/%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
      <url>/2023/07/31/Vue3%E6%B7%B1%E5%85%A5/%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="命令式和声明式"><a href="#命令式和声明式" class="headerlink" title="命令式和声明式"></a>命令式和声明式</h3><ul><li>命令式：<strong>详细描述做事过程</strong>的方式（关注过程）</li><li>声明式：<strong>模板语法</strong>（不关注过程，只关注结果）</li></ul><h3 id="命令式-VS-声明式"><a href="#命令式-VS-声明式" class="headerlink" title="命令式 VS 声明式"></a>命令式 VS 声明式</h3><ol><li>性能：命令式高于声明式</li><li>可维护性：命令式比声明式的维护性差</li></ol><h3 id="企业应用开发与设计原则"><a href="#企业应用开发与设计原则" class="headerlink" title="企业应用开发与设计原则"></a>企业应用开发与设计原则</h3><ol><li>项目开发成本（可维护性上对比）</li><li>开发体验（心智负担对比）</li></ol><h3 id="为什么说框架设计过程其实是一个不断取舍的过程？"><a href="#为什么说框架设计过程其实是一个不断取舍的过程？" class="headerlink" title="为什么说框架设计过程其实是一个不断取舍的过程？"></a>为什么说框架设计过程其实是一个不断取舍的过程？</h3><ol><li>命令式的性能 &gt; 声明式的性能</li><li>命令式的可维护性 &lt; 声明式的可维护性</li><li>声明式的框架本质是由命令式的代码去实现的</li><li>企业项目开发过程中，大多使用声明式框架</li></ol><p>开发设计原则：Vue 封装了命令式的逻辑，而对外暴露出声明式的接口。可维护性和性能不断取舍的过程。</p><h3 id="Vue-三种状态"><a href="#Vue-三种状态" class="headerlink" title="Vue 三种状态"></a>Vue 三种状态</h3><ol><li>编译时：complier</li><li>运行时：runtime</li><li>运行时 + 编译时：runtime + compiler</li></ol><h3 id="运行时"><a href="#运行时" class="headerlink" title="运行时"></a>运行时</h3><p>定义：运行时可以利用<code>render</code>把<code>vnode</code>渲染成真实<code>dom</code>节点</p><ul><li>渲染函数（render）：用于编程式地创建组件虚拟 dom 树的函数</li></ul><h3 id="编译时"><a href="#编译时" class="headerlink" title="编译时"></a>编译时</h3><p>文件：complier-core<br>作用：可以把 HTML 生成 render 函数，之后再运行时 render 函数把 vnode 渲染真实 dom 节点</p><h3 id="vue-的-dom-渲染"><a href="#vue-的-dom-渲染" class="headerlink" title="vue 的 dom 渲染"></a>vue 的 dom 渲染</h3><ol><li>初次渲染：挂载</li><li>更新渲染：打补丁（diff 算法）<blockquote><p>测试：console.time(‘element’)、console.timeEnd(‘element’)对比 1 万个 element 的耗时和 1 万个 js 对象耗时，可得知用 diff 算法</p></blockquote></li></ol><h3 id="为什么-vue-要设计成一个运行时-编译时的框架呢？"><a href="#为什么-vue-要设计成一个运行时-编译时的框架呢？" class="headerlink" title="为什么 vue 要设计成一个运行时+编译时的框架呢？"></a>为什么 vue 要设计成一个运行时+编译时的框架呢？</h3><ol><li>针对于纯运行时而言：因为不存在编辑器，所以我们只能提供一个复杂的 js 对象。</li><li>针对于纯编译时而言：因为缺少运行时，所以只能把分析差异的操作，放到<strong>编译时</strong>进行，同样因为省略了运行时，所以速度可能更快。但是这样方式将损失灵活性。</li><li>运行时 + 编译时：保持灵活性的基础上，尽量进行性能的优化，从而达到一种平衡。</li></ol><h3 id="副作用"><a href="#副作用" class="headerlink" title="副作用"></a>副作用</h3><ul><li>定义：对数据进行 setter（赋值）或者 getter（取值）操作，所产生的一系列后果。</li><li>副作用可以产生多个</li></ul><h3 id="三大模块"><a href="#三大模块" class="headerlink" title="三大模块"></a>三大模块</h3><ol><li>响应式：reactivity</li><li>运行时：runtime</li><li>编译器：compiler</li></ol><h3 id="typescript-支持友好真实的原因？"><a href="#typescript-支持友好真实的原因？" class="headerlink" title="typescript 支持友好真实的原因？"></a>typescript 支持友好真实的原因？</h3><ul><li>内部提供了很多 ts 类型</li></ul><blockquote><p>学习链接: <a href="https://pan.baidu.com/s/1nDmBSulp1SxRoMef2QYspw?pwd=6666">https://pan.baidu.com/s/1nDmBSulp1SxRoMef2QYspw?pwd=6666</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Vue深入 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue深入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>本地分支落后远程分支</title>
      <link href="/2023/01/04/%E5%AE%9E%E4%B9%A0%E5%AD%A6%E4%B9%A0/%E6%9C%AC%E5%9C%B0%E5%88%86%E6%94%AF%E8%90%BD%E5%90%8E%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF/"/>
      <url>/2023/01/04/%E5%AE%9E%E4%B9%A0%E5%AD%A6%E4%B9%A0/%E6%9C%AC%E5%9C%B0%E5%88%86%E6%94%AF%E8%90%BD%E5%90%8E%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>问题：<br>终端提示：更新被拒绝，因为您当前分支的最新提交落后于其对应的远程分支。</p><p>两步：</p><ol><li>git fetch origin</li><li>git merge origin&#x2F;目标分支</li></ol>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实习学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Vue中使用keep-alive</title>
      <link href="/2022/12/30/wepack/webpack%E4%B8%80%E4%BA%9B%E6%8F%92%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2022/12/30/wepack/webpack%E4%B8%80%E4%BA%9B%E6%8F%92%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="webpack-一些插件的使用"><a href="#webpack-一些插件的使用" class="headerlink" title="webpack 一些插件的使用"></a>webpack 一些插件的使用</h1><h2 id="性能优化分析-webpack-bundle-analyzer"><a href="#性能优化分析-webpack-bundle-analyzer" class="headerlink" title="性能优化分析 webpack-bundle-analyzer"></a>性能优化分析 webpack-bundle-analyzer</h2><ol><li>安装</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev webpack-bundle-analyzer</span><br></pre></td></tr></table></figure><ol start="2"><li>在 webpack.config.js 中配置：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">BundleAnalyzerPlugin</span> =</span><br><span class="line">  <span class="built_in">require</span>(<span class="string">&quot;webpack-bundle-analyzer&quot;</span>).<span class="property">BundleAnalyzerPlugin</span>;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exprots</span> = &#123;</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">BundleAnalyzerPlugin</span>(&#123;</span><br><span class="line">      <span class="attr">analyzerMode</span>: <span class="string">&quot;server&quot;</span>,</span><br><span class="line">      <span class="attr">analyzerHost</span>: <span class="string">&quot;127.0.0.1&quot;</span>,</span><br><span class="line">      <span class="attr">analyzerPort</span>: <span class="number">8889</span>,</span><br><span class="line">      <span class="attr">reportFilename</span>: <span class="string">&quot;report.html&quot;</span>,</span><br><span class="line">      <span class="attr">defaultSizes</span>: <span class="string">&quot;parsed&quot;</span>,</span><br><span class="line">      <span class="attr">openAnalyzer</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">generateStatsFile</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">statsFilename</span>: <span class="string">&quot;stats.json&quot;</span>,</span><br><span class="line">      <span class="attr">statsOptions</span>: <span class="literal">null</span>,</span><br><span class="line">      <span class="attr">logLevel</span>: <span class="string">&quot;info&quot;</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="3"><li>查看线上打包后的效果，在 page.json 的 scripts 添加脚本</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;analyz&quot;</span><span class="punctuation">:</span> <span class="string">&quot;NODE_ENV=production npm_config_report=true npm run build&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p><a href="https://zhuanlan.zhihu.com/p/31541721">https://zhuanlan.zhihu.com/p/31541721</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Vue深入 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue深入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3 新特性</title>
      <link href="/2022/11/02/Vue3%E6%B7%B1%E5%85%A5/%E6%96%B0%E7%89%B9%E6%80%A7/"/>
      <url>/2022/11/02/Vue3%E6%B7%B1%E5%85%A5/%E6%96%B0%E7%89%B9%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="Vue3-新特性"><a href="#Vue3-新特性" class="headerlink" title="Vue3 新特性"></a>Vue3 新特性</h1><h3 id="1-响应式系统不同"><a href="#1-响应式系统不同" class="headerlink" title="1. 响应式系统不同"></a>1. 响应式系统不同</h3><p>vue2 响应式机制是基于 <code>Object.defineProperty()</code>这个 api 实现的，只是对对象拦截，<code>Proxy</code> 才是真正代理，Vue2 还需要对数组方法重写，监听数组长度的变化还需要<code>$set</code> api</p><h3 id="2-自定义渲染器"><a href="#2-自定义渲染器" class="headerlink" title="2. 自定义渲染器"></a>2. 自定义渲染器</h3><p>vue2 所有的模块都是糅在一起的，只服务于 Vue，这样拓展性不好。Vue3 把模块拆分开来，使用最近流行的 monorepo 管理方式、响应式、编译和运行时全部独立开来，渲染逻辑也拆成平台渲染逻辑和浏览器 api 两部分，这样更适用于跨端应用。</p><h3 id="3-全部模块使用-TypeScript-重构"><a href="#3-全部模块使用-TypeScript-重构" class="headerlink" title="3. 全部模块使用 TypeScript 重构"></a>3. 全部模块使用 TypeScript 重构</h3><ul><li>更方便的提示</li><li>更健壮的代码</li></ul><h3 id="4-Composition-API-组合语法"><a href="#4-Composition-API-组合语法" class="headerlink" title="4. Composition API 组合语法"></a>4. Composition API 组合语法</h3><h4 id="4-1-Options-API-对比-Composistion-API-暴露出的问题"><a href="#4-1-Options-API-对比-Composistion-API-暴露出的问题" class="headerlink" title="4.1 Options API 对比 Composistion API 暴露出的问题"></a>4.1 Options API 对比 Composistion API 暴露出的问题</h4><ul><li>由于所有的数据都挂载在 this 之上，因而 Options API 对写 TypeScript 的类型引导不是很友好，并且这样也不好做 Tree-shaking 清除代码</li><li>新增功能基本都修改 data、method 等配置、并且代码 300 行之后，会经常上下反复横跳，开发很痛苦</li><li>代码不好复用，Vue2 的组件很难抽离通用逻辑，只能使用 mixin，还会带来命名冲突问题。</li></ul><h4 id="4-2-Composition-API-带来的好处"><a href="#4-2-Composition-API-带来的好处" class="headerlink" title="4.2 Composition API 带来的好处"></a>4.2 Composition API 带来的好处</h4><ul><li>所有 API 都是 import 引入的。用到的功能都是 import 进来，对 Tree-shaking 很友好。</li><li>可以把 methods、data 一起书写，维护更轻松。</li><li>代码方便复用，可以把一个功能所有的 methods、data 封装到一个独立的函数中，复用代码更容易。</li></ul><h3 id="5-新的组件"><a href="#5-新的组件" class="headerlink" title="5. 新的组件"></a>5. 新的组件</h3><p>Vue3 内置了 Frgment、Teleport 和 Suspense 三个新组件。</p><ul><li>Fragment：Vue3 组件不再要求有一个唯一的根节点，清除了很多无用的占位 div。</li><li>Teleport：允许组件渲染在别的元素内，主要开发弹窗组件特别有用。</li><li>Suspense：异步组件，更方便开发有异步请求的组件。</li></ul><h3 id="6-新一代工程化工具-Vite"><a href="#6-新一代工程化工具-Vite" class="headerlink" title="6. 新一代工程化工具 Vite"></a>6. 新一代工程化工具 Vite</h3><p>原先的 webpack 需要项目全部预打包，而 vite 只是把首页依赖的文件，依次通过网络请求去获取，整个开发体验得到巨大提升，做到复杂项目的秒级调试和热更新。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><img src="https://img-blog.csdnimg.cn/385ea922b6044c08bf10f61b0bc46a83.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> Vue深入 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue深入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>原生js回弹问题</title>
      <link href="/2022/10/31/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/%E5%8E%9F%E7%94%9Fjs%E5%9B%9E%E5%BC%B9%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
      <url>/2022/10/31/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/%E5%8E%9F%E7%94%9Fjs%E5%9B%9E%E5%BC%B9%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="原生-js-回弹问题"><a href="#原生-js-回弹问题" class="headerlink" title="原生 js 回弹问题"></a>原生 js 回弹问题</h1><h3 id="心路历程"><a href="#心路历程" class="headerlink" title="心路历程"></a>心路历程</h3><p>说下自己遇到这个问题的过程吧，真是心酸。遇到项目的背景，用 react 写 win11 桌面，在 win11 系统上没有回弹的问题，而在 mac 电脑上有拖拽回弹的问题。一开始去看知乎，找到最终答案，但自己在子元素上加相关 dragOver 属性然后再阻止默认事件，没有用…..。之后看了一篇掘金文章用复制解决回弹问题，虽然核心实现拖拽差不多，但是代码已经写了很久了，自己无从下手。。。之后第二天看了下别人具体怎么实现原生 js 拖拽，看了里面相关代码，发现是在父元素上加 dragover 事件，在阻止其默认事件。。。。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>年轻人心浮气躁了，是时候买枸杞修身养性了&lt;(￣︶￣)&gt;</p>]]></content>
      
      
      <categories>
          
          <category> 项目实战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目实战 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>10.28日随笔</title>
      <link href="/2022/10/28/%E4%B8%AA%E4%BA%BA%E9%9A%8F%E7%AC%94/10.28%E6%97%A5%E9%9A%8F%E7%AC%94/"/>
      <url>/2022/10/28/%E4%B8%AA%E4%BA%BA%E9%9A%8F%E7%AC%94/10.28%E6%97%A5%E9%9A%8F%E7%AC%94/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="10-28-日随笔"><a href="#10-28-日随笔" class="headerlink" title="10.28 日随笔"></a>10.28 日随笔</h1><p>现在深夜 12 点半，这个时候平时一般在看小说，或者打王者，至于今天为什么不打游戏看小说。纯粹因为看完了余华的小说《活着》，颇有感触。借用文中说的一句话：“没有比活着更艰难的事情，没有比活着更美好的事情。”徐福贵人生的起起落落基本上是我们父一辈所经历的事情，在那个年代能活着真的很艰难，很印象深刻，到如今的想起我的生活，基本上没什么困难，基本上有爸妈顶着，很幸福，挺像苦根的年少无知。</p>]]></content>
      
      
      <categories>
          
          <category> 心情日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git rebase合并多次提交记录</title>
      <link href="/2022/10/28/%E5%AE%9E%E4%B9%A0%E5%AD%A6%E4%B9%A0/git%20rebase%E5%90%88%E5%B9%B6%E5%A4%9A%E6%AC%A1%E6%8F%90%E4%BA%A4%E8%AE%B0%E5%BD%95/"/>
      <url>/2022/10/28/%E5%AE%9E%E4%B9%A0%E5%AD%A6%E4%B9%A0/git%20rebase%E5%90%88%E5%B9%B6%E5%A4%9A%E6%AC%A1%E6%8F%90%E4%BA%A4%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="git-rebase-合并多次提交记录"><a href="#git-rebase-合并多次提交记录" class="headerlink" title="git rebase 合并多次提交记录"></a>git rebase 合并多次提交记录</h1><p><strong>第一步</strong>：根据自己的开发分支创建一个<code>dev_one</code>分支</p><p><strong>第二步</strong>：<code>git reabse -i HEAD~n</code>分支（目标分支）n 为前几次要合并的次数</p><p><strong>第三步</strong>：可以看到编辑框，自己输出 s 命令，把后面要合并的都编辑为 s，第一次可以为 pick，编辑后，<code>ctrl + c</code>，再<code>:wq</code>保存</p><p><strong>第四步</strong>：保存之后，我们再编辑下，第一次可以改变提交记录的名字，<code>:wq</code>保存退出</p><p><strong>第五步</strong>：根据 master 分支创建一个分支<code>dev_two</code></p><p><strong>第六步</strong>：<code>dev_two</code>合并<code>dev_one</code>（git merge）</p><p><strong>第七步</strong>：解决合并冲突</p><p><strong>第八步</strong>：<code>dev_two</code>推送到远程分支，之后就可以发送合并到远程 master 的请求了</p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实习学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手写汇总</title>
      <link href="/2022/10/20/%E5%89%8D%E7%AB%AF%E6%89%8B%E5%86%99/%E6%89%8B%E5%86%99%E9%A2%98%E6%B1%87%E6%80%BB/"/>
      <url>/2022/10/20/%E5%89%8D%E7%AB%AF%E6%89%8B%E5%86%99/%E6%89%8B%E5%86%99%E9%A2%98%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="手写汇总"><a href="#手写汇总" class="headerlink" title="手写汇总"></a>手写汇总</h1><h3 id="防抖-debounce"><a href="#防抖-debounce" class="headerlink" title="防抖(debounce)"></a>防抖(debounce)</h3><blockquote><p>触发高配事件 n 秒内只触发一次，如果 n 秒内再次被触发，则重新计算时间</p></blockquote><p>代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">fn, wait</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> timer;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> _this = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="keyword">let</span> args = <span class="variable language_">arguments</span>;</span><br><span class="line">    <span class="keyword">if</span> (timer) &#123;</span><br><span class="line">      <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">    &#125;</span><br><span class="line">    timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      fn.<span class="title function_">apply</span>(_this, args);</span><br><span class="line">    &#125;, wait);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="节流-throttle"><a href="#节流-throttle" class="headerlink" title="节流(throttle)"></a>节流(throttle)</h3><blockquote><p>高频事件触发，但在 n 秒只触发一次</p></blockquote><h4 id="使用时间戳实现"><a href="#使用时间戳实现" class="headerlink" title="使用时间戳实现"></a>使用时间戳实现</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">fn, wait</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> time = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> _this = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="keyword">let</span> args = <span class="variable language_">arguments</span>;</span><br><span class="line">    <span class="keyword">let</span> now = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line">    <span class="keyword">if</span> (now - time &gt; wait) &#123;</span><br><span class="line">      fn.<span class="title function_">apply</span>(_this, args);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用定时器"><a href="#使用定时器" class="headerlink" title="使用定时器"></a>使用定时器</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">thorttle</span>(<span class="params">fn, wait</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> timer;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> _this = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="keyword">let</span> args = <span class="variable language_">arguments</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!timer) &#123;</span><br><span class="line">      timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        timer = <span class="literal">null</span>;</span><br><span class="line">        fn.<span class="title function_">apply</span>(_this, args);</span><br><span class="line">      &#125;, wait);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="手写-bind"><a href="#手写-bind" class="headerlink" title="手写 bind"></a>手写 bind</h3><blockquote><p>强行绑定 this 指向，但不执行</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">bind</span> = <span class="keyword">function</span> (<span class="params">context, ...args</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> self = <span class="variable language_">this</span>;</span><br><span class="line">  <span class="keyword">const</span> fn = <span class="keyword">function</span> (<span class="params">...newArgs</span>) &#123;</span><br><span class="line">    <span class="comment">// 考虑bind后为构造函数的情况</span></span><br><span class="line">    self.<span class="title function_">apply</span>(<span class="variable language_">this</span> <span class="keyword">instanceof</span> fn ? <span class="variable language_">this</span> : context, args.<span class="title function_">concat</span>(newArgs));</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  fn.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="variable language_">this</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> fn;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="实现深拷贝"><a href="#实现深拷贝" class="headerlink" title="实现深拷贝"></a>实现深拷贝</h3><ol><li><code>JSON.parse(JSON.stringify)</code>api（node 和浏览器均可以用）</li></ol><ul><li>缺点：<ol><li>对象里面如果是日期和正则的话会转成字符串</li><li><code>JSON.stringify</code> 传入递归结构会报错，以及会忽略 undefined 属性，<code>JSON.parse</code> 的时候会报错</li></ol></li></ul><ol start="2"><li><code>structuredClone</code> api（只能在浏览器环境使用）</li></ol><ul><li>解决了 JSON.stringiify 所有缺点</li></ul><ol start="3"><li>自己手写（完整版）</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">deepClone</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="comment">// 可能为null</span></span><br><span class="line">  <span class="keyword">if</span> (obj === <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  <span class="comment">// 为日期对象</span></span><br><span class="line">  <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> <span class="title class_">Date</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Date</span>(obj);</span><br><span class="line">  <span class="comment">// 为正则对象</span></span><br><span class="line">  <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> <span class="title class_">RegExp</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RegExp</span>(obj);</span><br><span class="line">  <span class="keyword">let</span> result = <span class="title class_">Object</span>.<span class="title function_">create</span>(obj);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">Object</span>.<span class="property">hasOwnProperty</span>.<span class="title function_">call</span>(obj, key)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> obj[key] === <span class="string">&quot;object&quot;</span>) &#123;</span><br><span class="line">        result[key] = <span class="title function_">deepClone</span>(obj[key]);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        result[key] = obj[key];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="URL-系列"><a href="#URL-系列" class="headerlink" title="URL 系列"></a>URL 系列</h2><h3 id="实现-URL-取参数"><a href="#实现-URL-取参数" class="headerlink" title="实现 URL 取参数"></a>实现 URL 取参数</h3><p>实现如下这个功能，且 url 里面还有汉字</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;https://test.com?name=%E5%BA%B7%E5%BA%B7&amp;age=20&quot;</span>;</span><br><span class="line"><span class="comment">// =&gt; &#123;name: 康康,age: 20&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;https://test.com?name=%E5%BA%B7%E5%BA%B7&amp;age=20&amp;hobby=%E6%95%B2%E4%BB%A3%E7%A0%81&amp;hobby=%E7%9C%8B%E4%B9%A6&quot;</span>;</span><br><span class="line"><span class="comment">// =&gt; &#123;name: 康康, age:20, hobby: [&#x27;敲代码&#x27;, &#x27;看书&#x27;]&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">urlParams</span>(<span class="params">url</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> dict = &#123;&#125;;</span><br><span class="line">  url.<span class="title function_">replace</span>(<span class="regexp">/([^?&amp;]*)=([^&amp;]*)/g</span>, <span class="function">(<span class="params">_, key, val</span>) =&gt;</span> &#123;</span><br><span class="line">    key = <span class="built_in">decodeURIComponent</span>(key);</span><br><span class="line">    val = <span class="built_in">decodeURIComponent</span>(val);</span><br><span class="line">    <span class="keyword">if</span> (dict[key]) <span class="keyword">return</span> (dict[key] = [dict[key], val].<span class="title function_">flat</span>());</span><br><span class="line">    dict[key] = val;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> dict;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现一个函数用来对-URL-的-querystring-进行编码"><a href="#实现一个函数用来对-URL-的-querystring-进行编码" class="headerlink" title="实现一个函数用来对 URL 的 querystring 进行编码"></a>实现一个函数用来对 URL 的 querystring 进行编码</h3><h2 id="科里化系列"><a href="#科里化系列" class="headerlink" title="科里化系列"></a>科里化系列</h2><h3 id="实现一个无限累加-sum-函数"><a href="#实现一个无限累加-sum-函数" class="headerlink" title="实现一个无限累加 sum 函数"></a>实现一个无限累加 sum 函数</h3><blockquote><p>实现效果大该是这个样子的</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">sum</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>).<span class="title function_">valueOf</span>(); <span class="comment">//6</span></span><br><span class="line"><span class="title function_">sum</span>(<span class="number">2</span>, <span class="number">3</span>)(<span class="number">2</span>).<span class="title function_">valueOf</span>(); <span class="comment">//7</span></span><br><span class="line"><span class="title function_">sum</span>(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>)(<span class="number">4</span>).<span class="title function_">valueOf</span>(); <span class="comment">//10</span></span><br><span class="line"><span class="title function_">sum</span>(<span class="number">2</span>)(<span class="number">4</span>, <span class="number">1</span>)(<span class="number">2</span>).<span class="title function_">valueOf</span>(); <span class="comment">//9</span></span><br><span class="line"><span class="title function_">sum</span>(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>)(<span class="number">4</span>)(<span class="number">5</span>)(<span class="number">6</span>).<span class="title function_">valueOf</span>(); <span class="comment">// 21</span></span><br></pre></td></tr></table></figure><p><strong>代码实现</strong>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">  <span class="comment">// 收集参数</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">f</span> = (<span class="params">...rest</span>) =&gt; <span class="title function_">sum</span>(...rest, ...args);</span><br><span class="line">  <span class="comment">// 一次性处理</span></span><br><span class="line">  f.<span class="property">valueOf</span> = <span class="function">() =&gt;</span> args.<span class="title function_">reduce</span>(<span class="function">(<span class="params">x, y</span>) =&gt;</span> x + y, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span> f;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数组方法系列"><a href="#数组方法系列" class="headerlink" title="数组方法系列"></a>数组方法系列</h2><h3 id="实现一个-flatMap-函数"><a href="#实现一个-flatMap-函数" class="headerlink" title="实现一个 flatMap 函数"></a>实现一个 flatMap 函数</h3><blockquote><p>实现一个<code>[1, 2, [3] , 4].flatMap(x =&gt; x + 1)</code> &#x3D;&gt; <code>[2, 3, 31, 5]</code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">flatMap</span> = <span class="keyword">function</span> (<span class="params">mapper</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">map</span>(mapper).<span class="title function_">flat</span>();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="实现一个-sample-函数，从数组随机取一个元素"><a href="#实现一个-sample-函数，从数组随机取一个元素" class="headerlink" title="实现一个 sample 函数，从数组随机取一个元素"></a>实现一个 sample 函数，从数组随机取一个元素</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sample</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(<span class="variable language_">this</span>)) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;not a array&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>[<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="variable language_">this</span>.<span class="property">length</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="手写一个-async-x2F-await-函数"><a href="#手写一个-async-x2F-await-函数" class="headerlink" title="手写一个 async&#x2F;await 函数"></a>手写一个 async&#x2F;await 函数</h3><p>本人写了一篇 CSDN 文章：<a href="https://blog.csdn.net/weixin_50789156/article/details/124199482">https://blog.csdn.net/weixin_50789156&#x2F;article&#x2F;details&#x2F;124199482</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">myAsync</span>(<span class="params">genFn</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> gen = genFn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">function</span> <span class="title function_">go</span>(<span class="params">key, arg</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> res;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          res = gen[key](arg);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="title function_">reject</span>(err);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> &#123; value, done &#125; = res;</span><br><span class="line">        <span class="keyword">if</span> (done) <span class="title function_">resolve</span>(<span class="string">&quot;ok&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(value).<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> <span class="title function_">go</span>(key, data));</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 初始化执行一次</span></span><br><span class="line">      <span class="title function_">go</span>(<span class="string">&quot;next&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现一个-lru-cache"><a href="#实现一个-lru-cache" class="headerlink" title="实现一个 lru cache"></a>实现一个 lru cache</h3><p>大概实现一个这样的算法题，get 操作会产生最新的值，put 也会产生最新的值，且原数据有限制，会删除最就未访问的值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// [&quot;LRUCache&quot;,&quot;put&quot;,&quot;put&quot;,&quot;get&quot;,&quot;put&quot;,&quot;get&quot;,&quot;put&quot;,&quot;get&quot;,&quot;get&quot;,&quot;get&quot;]</span></span><br><span class="line"><span class="comment">// [[2],[1,1],[2,2],[1],[3,3],[2],[4,4],[1],[3],[4]]</span></span><br><span class="line"><span class="keyword">const</span> lruCache = <span class="keyword">new</span> <span class="title class_">LRUCache</span>(<span class="number">2</span>);</span><br><span class="line">lruCache.<span class="title function_">put</span>(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">lruCache.<span class="title function_">put</span>(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">const</span> res1 = lruCache.<span class="title function_">get</span>(<span class="number">1</span>);</span><br><span class="line">lruCache.<span class="title function_">put</span>(<span class="number">3</span>, <span class="number">3</span>);</span><br><span class="line"><span class="keyword">const</span> res2 = lruCache.<span class="title function_">get</span>(<span class="number">2</span>);</span><br><span class="line">lruCache.<span class="title function_">put</span>(<span class="number">4</span>, <span class="number">4</span>);</span><br><span class="line"><span class="keyword">const</span> res3 = lruCache.<span class="title function_">get</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">const</span> res4 = lruCache.<span class="title function_">get</span>(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">const</span> res5 = lruCache.<span class="title function_">get</span>(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res1, res2, res3, res4, res5);</span><br><span class="line"><span class="comment">// 1 undefined undefined 3 4</span></span><br></pre></td></tr></table></figure><p>代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LRUCache</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">limit</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">limit</span> = limit;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">cache</span> = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">get</span>(<span class="params">key</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">cache</span>.<span class="title function_">has</span>(key)) <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">    <span class="keyword">const</span> value = <span class="variable language_">this</span>.<span class="property">cache</span>.<span class="title function_">get</span>(key);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">cache</span>.<span class="title function_">delete</span>(key);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">cache</span>.<span class="title function_">set</span>(key, value);</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">put</span>(<span class="params">key, value</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">cache</span>.<span class="title function_">has</span>(key)) <span class="variable language_">this</span>.<span class="property">cache</span>.<span class="title function_">delete</span>(key);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">cache</span>.<span class="property">size</span> &gt;= <span class="variable language_">this</span>.<span class="property">limit</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> del = <span class="variable language_">this</span>.<span class="property">cache</span>.<span class="title function_">keys</span>().<span class="title function_">next</span>().<span class="property">value</span>;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">cache</span>.<span class="title function_">delete</span>(del);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">cache</span>.<span class="title function_">set</span>(key, value);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="loash-系列"><a href="#loash-系列" class="headerlink" title="loash 系列"></a>loash 系列</h2><h3 id="实现-loash-get-方法"><a href="#实现-loash-get-方法" class="headerlink" title="实现 loash.get 方法"></a>实现 loash.get 方法</h3><blockquote><p>定义一个对象，实现大概这样的效果</p></blockquote><blockquote><p>const object &#x3D; { a: [{ b: { c: 3 } }] };</p></blockquote><blockquote><p>get(object, “a[0].b.c”); &#x2F;&#x2F;&#x3D;&gt; 3</p></blockquote><blockquote><p>get(object, ‘a[0][“b”][“c”]’); &#x2F;&#x2F;&#x3D;&gt; 3</p></blockquote><blockquote><p>get(object, “a[100].b.c”, 10086);&#x2F;&#x2F;&#x3D;&gt; 10086</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">get</span>(<span class="params">source, path, defaultValue = <span class="literal">undefined</span></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> paths = path</span><br><span class="line">    .<span class="title function_">repalce</span>(<span class="regexp">/\[(\w+)\]/g</span>, <span class="string">&quot;.$1&quot;</span>)</span><br><span class="line">    .<span class="title function_">repalce</span>(<span class="regexp">/\[&#x27;(\w+)&#x27;\]/g</span>)</span><br><span class="line">    .<span class="title function_">repalce</span>(<span class="regexp">/\[&quot;(\w+)&quot;\]/g</span>)</span><br><span class="line">    .<span class="title function_">split</span>(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">  <span class="keyword">let</span> result = source;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> p <span class="keyword">of</span> path) &#123;</span><br><span class="line">    result = result?.<span class="property">p</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result === <span class="literal">undefined</span> ? defaultValue : result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现-loash-once"><a href="#实现-loash-once" class="headerlink" title="实现 loash.once"></a>实现 loash.once</h3><blockquote><p>大概效果是这样的</p></blockquote><p><strong>示例</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">f</span> = (<span class="params">x</span>) =&gt; x;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> onceF = <span class="title function_">once</span>(f);</span><br><span class="line"></span><br><span class="line"><span class="comment">//=&gt; 3</span></span><br><span class="line"><span class="title function_">onceF</span>(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//=&gt; 3</span></span><br><span class="line"><span class="title function_">onceF</span>(<span class="number">4</span>);</span><br></pre></td></tr></table></figure><p><strong>代码实现</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">onceCache</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> toggle = <span class="literal">false</span>;</span><br><span class="line">  res = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (toggle) <span class="keyword">return</span> res;</span><br><span class="line">    toggle = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> (res = fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>));</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Promise-系列"><a href="#Promise-系列" class="headerlink" title="Promise 系列"></a>Promise 系列</h2><h3 id="手写-Promise-及-then-方法"><a href="#手写-Promise-及-then-方法" class="headerlink" title="手写 Promise 及 then 方法"></a>手写 Promise 及 then 方法</h3><blockquote><p>原文可可以看 <a href="https://juejin.cn/post/7040016523108286494">https://juejin.cn/post/7040016523108286494</a> 这篇文章，个人感觉书写的格式梳理的很好</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">myPromise</span> &#123;</span><br><span class="line">  status = <span class="string">&quot;pendding&quot;</span>;</span><br><span class="line">  value = <span class="literal">undefined</span>;</span><br><span class="line">  onResolvedCallbacks = [];</span><br><span class="line">  onRejectedCallbacks = [];</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">exec</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">reslove</span> = (<span class="params">value</span>) =&gt; &#123;</span><br><span class="line">      <span class="keyword">const</span> <span class="title function_">doFn</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> !== <span class="string">&quot;pendding&quot;</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">value</span> = value;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">status</span> = <span class="string">&quot;resloved&quot;</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="variable language_">this</span>.<span class="property">onRejectedCallbacks</span>.<span class="property">length</span>) &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">onResolvedCallbacks</span>.<span class="title function_">shift</span>()();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="built_in">setTimeout</span>(doFn, <span class="number">0</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">reject</span> = (<span class="params">value</span>) =&gt; &#123;</span><br><span class="line">      <span class="keyword">const</span> <span class="title function_">doFn</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> !== <span class="string">&quot;pedding&quot;</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">value</span> = value;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">status</span> = <span class="string">&quot;rejected&quot;</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="variable language_">this</span>.<span class="property">onRejectedCallbacks</span>.<span class="property">length</span>) &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">onRejectedCallbacks</span>.<span class="title function_">shift</span>()();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">setTimeout</span>(doFn, <span class="number">0</span>);</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="title function_">exec</span>(reslove, reject);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">      <span class="title function_">reject</span>(err);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">then</span>(<span class="params">onReslove, onReject</span>) &#123;</span><br><span class="line">    onReslove = <span class="keyword">typeof</span> onReslove === <span class="string">&quot;function&quot;</span> ? onReslove : <span class="function">(<span class="params">res</span>) =&gt;</span> res;</span><br><span class="line">    onReject =</span><br><span class="line">      <span class="keyword">typeof</span> onReject === <span class="string">&quot;function&quot;</span></span><br><span class="line">        ? onReject</span><br><span class="line">        : <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> err;</span><br><span class="line">          &#125;;</span><br><span class="line">    <span class="keyword">const</span> newPromise = <span class="keyword">new</span> <span class="title function_">myPromise</span>(<span class="function">(<span class="params">reslove, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 统一处理函数</span></span><br><span class="line">      <span class="keyword">const</span> <span class="title function_">execFun</span> = (<span class="params">fn, val</span>) =&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">let</span> res = <span class="title function_">fn</span>(val);</span><br><span class="line">          <span class="keyword">if</span> (newPromise === res) &#123;</span><br><span class="line">            <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&quot;回调地狱！！&quot;</span>));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> (res <span class="keyword">instanceof</span> myPromise) &#123;</span><br><span class="line">            myPromise.<span class="title function_">then</span>(reslove, reject);</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="title function_">reslove</span>(res);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">          <span class="title function_">reject</span>(err);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> <span class="title function_">success</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">        <span class="title function_">execFun</span>(onReslove, <span class="variable language_">this</span>.<span class="property">value</span>);</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> <span class="title function_">failed</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">        <span class="title function_">execFun</span>(onReject, <span class="variable language_">this</span>.<span class="property">value</span>);</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="string">&quot;pending&quot;</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">onResolvedCallbacks</span>.<span class="title function_">push</span>(success);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">onRejectedCallbacks</span>.<span class="title function_">push</span>(failed);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="string">&quot;reslove&quot;</span>) &#123;</span><br><span class="line">        <span class="title function_">success</span>();</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">failed</span>();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> newPromise;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="手写-promise-map-方法，控制并发数量限制"><a href="#手写-promise-map-方法，控制并发数量限制" class="headerlink" title="手写 promise.map 方法，控制并发数量限制"></a>手写 promise.map 方法，控制并发数量限制</h3><blockquote><p>第一个 for 循环 limit 同步，每次执行 limit 个，当执行完当前的 promise，会进入下一个 next</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">promiseMap</span>(<span class="params">list, fn, limit = <span class="literal">Infinity</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">reslove</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> ret = [];</span><br><span class="line">    <span class="keyword">let</span> index = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">next</span>(<span class="params"></span>) &#123;</span><br><span class="line">      ++index;</span><br><span class="line">      <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(list[index])</span><br><span class="line">        .<span class="title function_">then</span>(<span class="function">(<span class="params">val</span>) =&gt;</span> <span class="title function_">fn</span>(val, index))</span><br><span class="line">        .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">          ret.<span class="title function_">push</span>(res);</span><br><span class="line">          <span class="keyword">if</span> (ret.<span class="property">length</span> === arr.<span class="property">length</span>) &#123;</span><br><span class="line">            <span class="title function_">reslove</span>(ret);</span><br><span class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (index &lt; arr.<span class="property">length</span>) &#123;</span><br><span class="line">            <span class="title function_">next</span>();</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; limit &amp;&amp; i &lt; list.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="title function_">next</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Promise-all"><a href="#Promise-all" class="headerlink" title="Promise.all"></a>Promise.all</h3><blockquote><p>作用： 并发请求，一次性处理多个 promise<br>只要有一个失败状态就返回</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">all</span> = <span class="keyword">function</span> (<span class="params">promiseArr</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> index = <span class="number">0</span>, <span class="comment">// 计数器</span></span><br><span class="line">    len = promiseArr.<span class="property">legth</span>,</span><br><span class="line">    data = [];</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">reslove, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    promiseArr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">p, i</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(p).<span class="title function_">then</span>(</span><br><span class="line">        <span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">// 保证值得顺序</span></span><br><span class="line">          data[i] = val;</span><br><span class="line">          <span class="comment">// 执行完promise已经达到长度</span></span><br><span class="line">          <span class="keyword">if</span> (++index === len) <span class="title function_">reslove</span>(data);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="title function_">reject</span>(err);</span><br><span class="line">        &#125;</span><br><span class="line">      );</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Promise-race"><a href="#Promise-race" class="headerlink" title="Promise.race"></a>Promise.race</h3><blockquote><p>返回最快的 promise 的结果</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">race</span> = <span class="keyword">function</span> (<span class="params">promiseArr</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">reslove, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    promiseArr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">p</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(p).<span class="title function_">then</span>(</span><br><span class="line">        <span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="title function_">reslove</span>(val);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="title function_">reject</span>(err);</span><br><span class="line">        &#125;</span><br><span class="line">      );</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 手写汇总 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 手写 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人错题集</title>
      <link href="/2022/10/18/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AF%95/%E9%94%99%E9%A2%98%E9%9B%86/"/>
      <url>/2022/10/18/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AF%95/%E9%94%99%E9%A2%98%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="个人错题集"><a href="#个人错题集" class="headerlink" title="个人错题集"></a>个人错题集</h1><h2 id="react"><a href="#react" class="headerlink" title="react"></a>react</h2><ol><li><Route />中的 path 属性可以使用通配符，以下关于通配符的规则描述错误的是？</li></ol><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A. “:paramName”： 匹配URL的一个部分，直到遇到下一个/、?、#为止。这个路径参数可以通过this.props.params.paramName取出</span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">B. “()”： ()表示URL的这个部分是可选的。</span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C. “*”： *匹配任意字符，直到模式里面的下一个字符为止。匹配方式是贪婪模式。</span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D. “**”：** 匹配任意字符，直到下一个/、?、#为止。匹配方式是贪婪模式。</span><br></pre></td></tr></table></figure><details> <summary>查看答案</summary>     <figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">答案为D，*匹配任意字符，直到模式里面的下一个字符为止。匹配方式是非贪婪模式。</span><br></pre></td></tr></table></figure></details><ol start="2"><li>关于“错误边界”，以下说法错误的是？</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A. static getDerivedStateFromError() 可以用来渲染备用UI</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">B. componentDidCatch()可以打印错误信息</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C. 错误边界是一种React组件，这种组件可以捕获并打印发生在当前组件的javaScript错误</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D. class组件中只要定义了static getDerivedStateFromError()或componentDidCatch()其中一个，该组件就会变成错误边界</span><br></pre></td></tr></table></figure><details> <summary>查看答案</summary>     <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">答案为C</span><br><span class="line">解析：错误边界无法捕获 以下四种场景中产生的错误： </span><br><span class="line">    1.`事件处理函数`（因为 Error Boundaries 实现的本质是触发更新，但是事件处理函数不在render或者commit阶段，所以无法进行捕获，</span><br><span class="line">如果你需要在事件处理器内部捕获错误，可以使用原生的 try / catch 语句 ） </span><br><span class="line">    2. 异步代码（例如 setTimeout 或 requestAnimationFrame 回调函数） </span><br><span class="line">    3. 服务端渲染（因为触发更新只能在客户端进行，不能在serve端进行） </span><br><span class="line">    4. 它自身抛出来的错误（因为错误抛出要向父节点冒泡寻找 Error Boundaries 处理，无法处理自身产生的错误）</span><br></pre></td></tr></table></figure></details><ol start="3"><li>以下不属于 React 支持的触摸事件的是？</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A. onTouchCancel</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">B. onTouchEnd</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C. onTouchStart</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D. onTouchOver</span><br></pre></td></tr></table></figure><details> <summary>查看答案</summary><p>答案为 D<br>React 支持的触摸事件有：onTouchStart，onTouchMove，onTouchEnd，onTouchCancel</p><table><thead><tr><th>事件</th><th>触发时机</th></tr></thead><tbody><tr><td>onTouchStart</td><td>手指触摸屏幕的时候触发</td></tr><tr><td>onTouchMove</td><td>手指在屏幕上滑动的时候触发</td></tr><tr><td>onTouchEnd</td><td>手指从屏幕上移开的时候触发</td></tr><tr><td>onTouchCancel</td><td>触摸事件被中断时发生，如：来电话、来短信、弹出消息提示</td></tr></tbody></table></details><ol start="4"><li>以下哪项对 react-router-dom 中组件分类是错误的?</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A. 路由器组件: BrowserRouter和HashRouter</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">B. 导航组件: Link和NavLink</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C. 路由匹配组件: Route和Switch</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D. 导航组件: Route和Switch</span><br></pre></td></tr></table></figure><details> <summary>查看答案</summary><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">答案为D</span><br><span class="line">解析：在react-router-dom中通常使用的组件有三种路由器组件: 如BrowserRouter和HashRouter</span><br><span class="line"></span><br><span class="line">路由匹配组件: Route和Switch 组件</span><br><span class="line"></span><br><span class="line">导航组件: Link和NavLink 组件</span><br></pre></td></tr></table></figure></details><ol start="5"><li>以下不属于 react 支持的剪贴板事件的是?</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A. onCopy</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">B. onPaste</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C. onCut</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D. onBeforeCopy</span><br></pre></td></tr></table></figure><details> <summary>查看答案</summary><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">答案为D</span><br><span class="line">解析：react支持的剪贴板事件有onCopy，onCut，onPaste</span><br></pre></td></tr></table></figure></details><ol start="6"><li>以下不属于 StrictMode 的作用或优点的是？</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A. 检测过时的 context API</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">B. 识别不安全的生命周期</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C. 检测意外的副作用</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D. 在生产环境也生效</span><br></pre></td></tr></table></figure><details> <summary>查看答案</summary><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">答案为D</span><br><span class="line">解析：严格模式检查仅在开发模式下运行，它们不会影响生产构建。</span><br></pre></td></tr></table></figure></details><ol start="7"><li>以下关于 Mobx 中原则说法错误的是?</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A. Mobx 支持单向数据流</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">B. 当状态改变时，所有衍生都会进行自动更新，可以观察到中间值</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C. 所有衍生默认都是同步更新</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D. 所有的计算值都应该是纯净的</span><br></pre></td></tr></table></figure><details> <summary>查看答案</summary><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">答案为B</span><br><span class="line">解析：当状态改变时，所有衍生都会进行原子级的自动更新。因此永远不可能观察到中间值。</span><br></pre></td></tr></table></figure></details><ol start="8"><li>关于 Context 一下说法错误的是？</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A. Context提供了一种在组件之间共享此类值的方式，而不必显式地通过组件树的逐层传递 props</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">B. Context设计目的是为了共享那些对于一个组件树而言是“全局”的数据</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C. Context会提高组件的复用性</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D. Context能让你将这些数据向组件树下所有的组件进行“广播”，所有的组件都能访问到这些数据，也能访问到后续的数据更新</span><br></pre></td></tr></table></figure><details> <summary>查看答案</summary><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">答案为C</span><br><span class="line">解析：当一些值需要在多个组件间共享的时候，context是个可以避免数据层层传递的方法，但他会使得组件得复用性变差。</span><br></pre></td></tr></table></figure></details><ol start="9"><li>以下关于 useContext 说法错误的是?</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A. 调用了useContext的组件总会在context值变化时重新渲染</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">B. 当组件上层最近的 &lt;MyContext.Provider&gt; 更新时，该 Hook 会触发重渲染</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C. useContext 的参数必须是 context 对象本身：</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D. 当组件最上层的 &lt;MyContext.Provider&gt; 更新时，该 Hook 会触发重渲染</span><br></pre></td></tr></table></figure><details> <summary>查看答案</summary><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">答案为C</span><br><span class="line">解析：useContext 的参数必须是 *context 对象本身*：</span><br><span class="line">当组件上层最近的 &lt;MyContext.Provider&gt; 更新时，该 Hook 会触发重渲染，并使用最新传递给 MyContext provider 的 context value 值。</span><br></pre></td></tr></table></figure></details><ol start="10"><li>可以使子节点渲染到存在于父组件以外的 DOM 节点上的方法是?</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A. React.createPortal</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">B. React.createElement</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C. ReactDOM.createPortal</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D. ReactDom.render</span><br></pre></td></tr></table></figure><details> <summary>查看答案</summary><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">答案为C</span><br><span class="line">解析：ReactDOM.createPortal函数可以将子节点渲染到存在于父组件以外的DOM节点上。</span><br></pre></td></tr></table></figure></details>    <ol start="11"><li>关于React中的“状态提升”说法错误的是?</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A. React建议任何可变数据应当只有一个相对应的唯一“数据源”</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">B. 提升状态(state)方式相比于双向绑定方式需要编写更多的“样板”代码</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C. 虽然某些数据可以由props或state推导得出，但是我们最好还是单独在state声明它</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D. 通常，多个组件需要反映相同的变化数据，都应尽量将共享状态提升到最近的公共父组件中去</span><br></pre></td></tr></table></figure><details> <summary>查看答案</summary><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">答案为C</span><br><span class="line">解析：其中ABD都为官方说法，C选项中如果某些数据可以由props或state推导得出，那么就不应该将其在state中声明。</span><br></pre></td></tr></table></figure></details><ol start="12"><li>以下不是 Redux 的使用原则的是？</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A. 单一数据源</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">B. 双向数据流</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C. State是只读的</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D. 使用纯函数来执行修改</span><br></pre></td></tr></table></figure><details> <summary>查看答案</summary>     <figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">答案为B</span><br><span class="line">解析：Redux可以用这三个基本原则来描述：1.单一数据源 2.State是只读的 3.使用纯函数来执行修改</span><br></pre></td></tr></table></figure></details><ol start="13"><li>从  DOM  中卸载组件，可以使用？</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A. ReactDOM.unmountComponentAtNode</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">B. ReactDOM.unmountComponent</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C. ReactDOM.unmountRender</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D. ReactDOM.clearDOMNode</span><br></pre></td></tr></table></figure><details> <summary>查看答案</summary>     <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">答案为A</span><br><span class="line">解析：ReactDOM.unmountComponentAtNode，从DOM中卸载组件，会将其事件处理器</span><br><span class="line">    （event handlers）和 state 一并清除。如果指定容器上没有对应已挂载的组件，这个函数什么也不会做。</span><br><span class="line">    如果组件被移除将会返回 true，如果没有组件可被移除将会返回 false。</span><br></pre></td></tr></table></figure></details><ol start="14"><li>以下不属于 React 复合事件的是？</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A. onCompositionEnd</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">B. onCompositionRender</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C. onCompositionUpdate</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D. onCompositionStart</span><br></pre></td></tr></table></figure><details> <summary>查看答案</summary><p>答案为 C<br>解析：React 复合事件有 onCompositionEnd，onCompositionStart，onCompositionUpdate</p></details><ol start="15"><li>在 componentDidUpdate()中以下哪个说法是正确的?</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A. 在componentDidUpdate()中可以任意调用setState()</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">B. 当组件更新时，componentDidUpdate()总会被调用</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C. 首次渲染时，componentDidUpdate()会在componentDidMount()前面调用</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D. 当组件更新时，componentDidUpdate()可能不会被调用</span><br></pre></td></tr></table></figure><details> <summary>查看答案</summary><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">答案为D</span><br><span class="line">解析：A选项中，可以在 componentDidUpdate()中直接调用 setState()，但请注意它必须被包裹在一个条件语句里</span><br><span class="line"></span><br><span class="line">BD选项中，如果shouldComponentUpdate()返回值为false，则不会调用componentDidUpdate()</span><br><span class="line"></span><br><span class="line">C选项中，首次渲染不会执行componentDidUpdate()</span><br></pre></td></tr></table></figure></details><ol start="16"><li>关于 Redux，以下说法错误的是?</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A. 唯一改变state的方法就是触发action</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">B. action是一个用于描述即将发生事件的普通对象</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C. 为了描述action如何改变state tree，你需要编写纯的reducers</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D. 整个应用的全局state被储存在一棵object tree中，并且这个object tree只存在于唯一一个store中</span><br></pre></td></tr></table></figure><details> <summary>查看答案</summary><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">答案为B</span><br><span class="line">解析：在Redux中，action是一个用于描述已发生事件的普通对象.</span><br></pre></td></tr></table></figure></details><ol start="17"><li>class 组件生命周期方法对应到函数组件和 Hook，以下说法错误的是？</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A. render =&gt; 这是函数组件体本身</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">B. getSnapshotBeforeUpdate 目前没有对应的Hook</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C. constructor =&gt; 函数组件不需要构造函数。你可以通过调用 useState 来初始化 state。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D. componentWillUnmount 目前没有对应的Hook</span><br></pre></td></tr></table></figure><details> <summary>查看答案</summary><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">答案为D</span><br><span class="line">解析：useEffect里面返回的函数</span><br></pre></td></tr></table></figure></details><ol start="18"><li>以下关于 ReactDOM.render 说法错误的是?</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A. ReactDOM.render() 会控制你传入容器节点里的内容</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">B. ReactDOM.render() 会修改容器节点以及其子节点</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C. ReactDOM.render() 目前会返回对根组件 ReactComponent 实例的引用</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D. 使用 ReactDOM.render() 对服务端渲染容器进行 hydrate 操作的方式已经被废弃，并且会在 React 17 被移除</span><br></pre></td></tr></table></figure><details> <summary>查看答案</summary><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">答案为B</span><br><span class="line">解析：ReactDOM.render() 不会修改容器节点（只会修改容器的子节点）。可以在不覆盖现有子节点的情况下，将组件插入已有的 DOM 节点中。</span><br></pre></td></tr></table></figure></details><ol start="19"><li>关于 Hook 中的 useDebugValue 的作用是？</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A. 获取当前是否在debug模式</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">B. 开启当前函数组件debug模式</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C. 可以在React开发者工具中显示自定义hook的标签</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D. 可以在React开发者工具中给函数组件添加额外的描述</span><br></pre></td></tr></table></figure><details> <summary>查看答案</summary><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">答案为C</span><br><span class="line">解析：useDebugValue可用于在React开发者工具中显示自定义Hook的标签。。</span><br></pre></td></tr></table></figure></details><ol start="20"><li>以下关于 ref 说法错误的是?</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A. 当ref属性用于HTML元素时，构造函数中使用React.createRef()创建的ref接收底层DOM元素作为其current属性</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">B. ref是使用React.createRef()创建的，并通过ref属性附加到React元素</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C. 当ref属性用于函数组件时，ref对象接收组件的挂载实例作为其current属性</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D. 当ref属性用于自定义class组件时，ref对象接收组件的挂载实例作为其current属性</span><br></pre></td></tr></table></figure><details> <summary>查看答案</summary><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">答案为C</span><br><span class="line">解析：不能在函数组件上使用ref属性，因为它们没有实例。在函数组件上使用ref，需要借助forwardRef。</span><br></pre></td></tr></table></figure></details><ol start="21"><li>关于 Hook 的使用，以下说法中不满足官方使用规则的是?</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A. 不要在循环、条件判断中调用Hook</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">B. 在自定义Hook或其他自定义函数中调用</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C. 在React函数最外层调用Hook</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D. 在React的函数组件中调用Hook</span><br></pre></td></tr></table></figure><details> <summary>查看答案</summary><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">答案为C</span><br><span class="line">解析：Hook使用规则：</span><br><span class="line"></span><br><span class="line">1.只能在函数最外层调用 Hook，不要在循环、条件判断或者子函数中调用；</span><br><span class="line"></span><br><span class="line">2.只能在React的函数组件或自定义的Hook中调用 Hook，不要在其他 JavaScript 函数中调用。</span><br></pre></td></tr></table></figure></details>    <ol start="22"><li>以下哪个选项不能作为Router组件的history属性值?</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A. createMemoryHistory</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">B. History</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C. hashHistory</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D. browserHistory</span><br></pre></td></tr></table></figure><details> <summary>查看答案</summary><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">答案为C</span><br><span class="line">解析：history属性，一共可以设置三种值:browserHistory、hashHistory和createMemoryHistory。</span><br></pre></td></tr></table></figure></details><ol start="23"><li>ReactDOM.createPortal(child, container)函数可以将子节点渲染到存在于父组件以外的 DOM 节点上，那么通过 Portal 进行事件冒泡时，会冒泡到?</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A. 会上冒到子元素插入的DOM节点，一直冒泡至DOM树的根</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">B. 不会上冒</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C. 会上冒到子元素插入的DOM节点，不再继续上冒</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D. 从portal内部触发的事件会一直冒泡至包含React树的祖先</span><br></pre></td></tr></table></figure><details> <summary>查看答案</summary><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">答案为C</span><br><span class="line">解析：尽管 portal 可以被放置在 DOM 树中的任何地方，但在任何其他方面，其行为和普通的 React 子节点行为一致。由于 portal 仍存在于 React 树， 且与 DOM 树 中的位置无关，那么无论其子节点是否是 portal，像 context 这样的功能特性都是不变的，包含事件冒泡。</span><br></pre></td></tr></table></figure></details><ol start="24"><li>验证对象是否为  React  元素可以使用（）方法?</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A. React.isValidReactElement</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">B. React.isValidElement</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C. React.isReactElement</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D. React.isElement</span><br></pre></td></tr></table></figure><details> <summary>查看答案</summary><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">答案为C</span><br><span class="line">解析：React.isValidElement 验证对象是否为React元素，返回值为true或false。</span><br></pre></td></tr></table></figure></details><ol start="25"><li>StrictMode 组件的作用是?</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A. 作用跟Fragment组件一样，可以一个组件返回多个元素</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">B. 用来突出显示应用程序中潜在问题</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C. 为其后代元素开启严格模式</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D. 为其后代元素触发额外的检查和警告</span><br></pre></td></tr></table></figure><details> <summary>查看答案</summary><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">答案为C</span><br><span class="line">解析：与Fragment一样，StrictMode不会渲染任何可见的UI。但是与Fragment不同的是，它为其后代元素触发额外的检查和警告。</span><br></pre></td></tr></table></figure></details><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ol><li>请选择下面代码输出 1 的次数</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&quot;#example&quot;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&quot;Hello&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="attr">test</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">message</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">created</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">message</span> = <span class="string">&quot;World&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">test</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>解释：因为 vue 的 <code>computed</code> 具有<code>缓存</code>功能。<code>message</code> 只<code>更新了一次</code>，所以 <code>test</code> <code>只触发一次</code>，执行一次 console.log(1)。<br>具体来说，computed 内的 test 函数会被加入到 message 这个响应式数据的依赖视图中，当修改了 message（触发了 message 的 set）之后，test 这个 computed 的 dirty 属性会被设置为 true，当视图渲染的时候，发现 dirty 为 true 了，就会执行 1 次 test 函数以获取最新的值。</p>]]></content>
      
      
      <categories>
          
          <category> 前端笔试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 错题集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生成任意文件</title>
      <link href="/2022/08/28/html5/%E7%94%9F%E6%88%90%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6/"/>
      <url>/2022/08/28/html5/%E7%94%9F%E6%88%90%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="生成任意文件"><a href="#生成任意文件" class="headerlink" title="生成任意文件"></a>生成任意文件</h1><p><strong>思路</strong>：</p><ul><li>用 Blob 对象生成任意格式数据</li><li>Blob 对象通过 createObjectURL 方法生成链接</li><li>用 a 标签下载任意格式数据</li><li>释放相对于的链接</li></ul><p><strong>核心代码</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 要保存的字符串</span></span><br><span class="line"><span class="keyword">const</span> stringData = <span class="string">&quot;# 一级标题\n## 二级标题&quot;</span>;</span><br><span class="line"><span class="comment">// stringData 表示要转换的字符串数据，type 表示要转换的数据格式</span></span><br><span class="line"><span class="keyword">const</span> blob = <span class="keyword">new</span> <span class="title class_">Blob</span>([stringData], &#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&quot;text/markdown&quot;</span>,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 根据 blob生成 url链接</span></span><br><span class="line"><span class="keyword">const</span> objectURL = <span class="variable constant_">URL</span>.<span class="title function_">createObjectURL</span>(blob);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个 a 标签Tag</span></span><br><span class="line"><span class="keyword">const</span> aTag = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;a&quot;</span>);</span><br><span class="line"><span class="comment">// 设置文件的下载地址</span></span><br><span class="line">aTag.<span class="property">href</span> = objectURL;</span><br><span class="line"><span class="comment">// 设置保存后的文件名称</span></span><br><span class="line">aTag.<span class="property">download</span> = <span class="string">&quot;markdown文件.md&quot;</span>;</span><br><span class="line"><span class="comment">// 给 a 标签添加点击事件</span></span><br><span class="line">aTag.<span class="title function_">click</span>();</span><br><span class="line"><span class="comment">// 释放一个之前已经存在的、通过调用 URL.createObjectURL() 创建的 URL 对象。</span></span><br><span class="line"><span class="comment">// 当你结束使用某个 URL 对象之后，应该通过调用这个方法来让浏览器知道不用在内存中继续保留对这个文件的引用了。</span></span><br><span class="line"><span class="variable constant_">URL</span>.<span class="title function_">revokeObjectURL</span>(objectURL);</span><br></pre></td></tr></table></figure><p><strong>demo 实例</strong>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>保存文件<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;button&quot;</span>&gt;</span>保存文件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">main</span>();</span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 获取按钮</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> button = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;button&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 给按钮添加点击事件</span></span></span><br><span class="line"><span class="language-javascript">        button.<span class="property">onclick</span> = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 要保存的字符串</span></span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">const</span> stringData = <span class="string">&quot;# 一级标题\n## 二级标题&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// dada 表示要转换的字符串数据，type 表示要转换的数据格式</span></span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">const</span> blob = <span class="keyword">new</span> <span class="title class_">Blob</span>([stringData], &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">type</span>: <span class="string">&quot;text/markdown&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">          &#125;);</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 根据 blob生成 url链接</span></span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">const</span> objectURL = <span class="variable constant_">URL</span>.<span class="title function_">createObjectURL</span>(blob);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 创建一个 a 标签Tag</span></span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">const</span> aTag = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;a&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 设置文件的下载地址</span></span></span><br><span class="line"><span class="language-javascript">          aTag.<span class="property">href</span> = objectURL;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 设置保存后的文件名称</span></span></span><br><span class="line"><span class="language-javascript">          aTag.<span class="property">download</span> = <span class="string">&quot;markdown文件.md&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 给 a 标签添加点击事件</span></span></span><br><span class="line"><span class="language-javascript">          aTag.<span class="title function_">click</span>();</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 释放一个之前已经存在的、通过调用 URL.createObjectURL() 创建的 URL 对象。</span></span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 当你结束使用某个 URL 对象之后，应该通过调用这个方法来让浏览器知道不用在内存中继续保留对这个文件的引用了。</span></span></span><br><span class="line"><span class="language-javascript">          <span class="variable constant_">URL</span>.<span class="title function_">revokeObjectURL</span>(objectURL);</span></span><br><span class="line"><span class="language-javascript">        &#125;;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> html </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js操作时间的应用</title>
      <link href="/2022/08/01/skill/js%E6%97%B6%E9%97%B4%E6%93%8D%E4%BD%9C%E7%9A%84%E5%BA%94%E7%94%A8/"/>
      <url>/2022/08/01/skill/js%E6%97%B6%E9%97%B4%E6%93%8D%E4%BD%9C%E7%9A%84%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="js操作时间的应用"><a href="#js操作时间的应用" class="headerlink" title="js操作时间的应用"></a>js操作时间的应用</h1><ol><li>获取时间格式化为YY-MM-DD HH:MM:SS</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getNowFormatDate</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">var</span> year = date.<span class="title function_">getFullYear</span>();</span><br><span class="line">    <span class="keyword">var</span> month = date.<span class="title function_">getMonth</span>() + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> d = date.<span class="title function_">getDate</span>();</span><br><span class="line">    <span class="keyword">var</span> hour = date.<span class="title function_">getHours</span>();</span><br><span class="line">    <span class="keyword">var</span> minute = date.<span class="title function_">getMinutes</span>();</span><br><span class="line">    <span class="keyword">var</span> second = date.<span class="title function_">getSeconds</span>();</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">if</span>(month&lt;<span class="number">10</span>)&#123;</span><br><span class="line">        month = <span class="string">&quot;0&quot;</span> + month;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">if</span>(d&lt;<span class="number">10</span>)&#123;</span><br><span class="line">        d = <span class="string">&quot;0&quot;</span> + d;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">if</span>(hour&lt;<span class="number">10</span>)&#123;</span><br><span class="line">        hour = <span class="string">&quot;0&quot;</span> + hour;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">if</span>(minute&lt;<span class="number">10</span>)&#123;</span><br><span class="line">        minute = <span class="string">&quot;0&quot;</span> + hour;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">if</span>(second&lt;<span class="number">10</span>)&#123;</span><br><span class="line">        second = <span class="string">&quot;0&quot;</span> + second;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> year + <span class="string">&quot;-&quot;</span> + month + <span class="string">&quot;-&quot;</span> + d + <span class="string">&quot; &quot;</span> +hour + <span class="string">&quot;:&quot;</span> + minute + <span class="string">&quot;:&quot;</span> + second;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>随机获取订单号</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@desc</span> 0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> falg代表是否是赠送卡片和收卡界面</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getNowFormatDate</span>(<span class="params">flag</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">var</span> year = date.<span class="title function_">getFullYear</span>();</span><br><span class="line">    <span class="keyword">var</span> month = date.<span class="title function_">getMonth</span>() + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> d = date.<span class="title function_">getDate</span>();</span><br><span class="line">    <span class="keyword">var</span> hour = date.<span class="title function_">getHours</span>();</span><br><span class="line">    <span class="keyword">var</span> minute = date.<span class="title function_">getMinutes</span>();</span><br><span class="line">    <span class="keyword">var</span> second = date.<span class="title function_">getSeconds</span>();</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">if</span>(month&lt;<span class="number">10</span>)&#123;</span><br><span class="line">        month = <span class="string">&quot;0&quot;</span> + month;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">if</span>(d&lt;<span class="number">10</span>)&#123;</span><br><span class="line">        d = <span class="string">&quot;0&quot;</span> + d;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">if</span>(hour&lt;<span class="number">10</span>)&#123;</span><br><span class="line">        hour = <span class="string">&quot;0&quot;</span> + hour;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">if</span>(minute&lt;<span class="number">10</span>)&#123;</span><br><span class="line">        minute = <span class="string">&quot;0&quot;</span> + hour;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">if</span>(second&lt;<span class="number">10</span>)&#123;</span><br><span class="line">        second = <span class="string">&quot;0&quot;</span> + second;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> year + <span class="string">&quot;-&quot;</span> + month + <span class="string">&quot;-&quot;</span> + d + (flag ? <span class="string">&quot; &quot;</span> +hour + <span class="string">&quot;:&quot;</span> + minute + <span class="string">&quot;:&quot;</span> + second : <span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JavaScript </tag>
            
            <tag> skill </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css弹窗动画</title>
      <link href="/2022/07/31/css/css%E5%BC%B9%E7%AA%97%E5%8A%A8%E7%94%BB/"/>
      <url>/2022/07/31/css/css%E5%BC%B9%E7%AA%97%E5%8A%A8%E7%94%BB/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="css弹窗动画"><a href="#css弹窗动画" class="headerlink" title="css弹窗动画"></a>css弹窗动画</h1><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>项目地址：<a href="https://github.com/kangkang123269/kate-demo/tree/main/css/css-animation-demo">地址</a></p><h3 id="js操作css类"><a href="#js操作css类" class="headerlink" title="js操作css类"></a>js操作css类</h3><ol><li>添加类名</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;myDiv&quot;</span>).<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;mystyle&#x27;</span>);</span><br></pre></td></tr></table></figure><ol start="2"><li>删除类名</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;myDiv&quot;</span>).<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;mystyle&#x27;</span>);</span><br></pre></td></tr></table></figure><ol start="3"><li>检查是否含有某个css类：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myDiv.<span class="property">classList</span>.<span class="title function_">contains</span>(<span class="string">&#x27;myCssClass&#x27;</span>);</span><br></pre></td></tr></table></figure><blockquote><p>注意：<code>document.querySelector(&#39;class&#39;).classList</code>是静态获取类名，不能操作类名</p></blockquote><h3 id="导入css"><a href="#导入css" class="headerlink" title="导入css"></a>导入css</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@import</span> url(<span class="string">&#x27;./fadeIn.css&#x27;</span>);</span><br><span class="line"><span class="keyword">@import</span> url(<span class="string">&#x27;./fadeleftIn.css&#x27;</span>);</span><br><span class="line"><span class="keyword">@import</span> url(<span class="string">&#x27;./fadelogIn.css&#x27;</span>);</span><br><span class="line"><span class="keyword">@import</span> url(<span class="string">&#x27;./popIn.css&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="弹窗动画"><a href="#弹窗动画" class="headerlink" title="弹窗动画"></a>弹窗动画</h3><ul><li>从上往下：</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.fadeIn</span> &#123;</span><br><span class="line">    -webkit-<span class="attribute">animation</span>: fadeInDown .<span class="number">3s</span>;</span><br><span class="line">    <span class="attribute">animation</span>: fadeInDown .<span class="number">3s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@keyframes</span> fadeInDown &#123;</span><br><span class="line">    <span class="number">0%</span> &#123;</span><br><span class="line">        -webkit-<span class="attribute">transform</span>: <span class="built_in">translate3d</span>(<span class="number">0</span>, -<span class="number">20%</span>, <span class="number">0</span>);</span><br><span class="line">        -webkit-<span class="attribute">transform</span>: <span class="built_in">translate3d</span>(<span class="number">0</span>, -<span class="number">20%</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translate3d</span>(<span class="number">0</span>, -<span class="number">20%</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translate3d</span>(<span class="number">0</span>, -<span class="number">20%</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="number">100%</span> &#123;</span><br><span class="line">        -webkit-<span class="attribute">transform</span>: none;</span><br><span class="line">        <span class="attribute">transform</span>: none;</span><br><span class="line">        <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@-webkit-keyframes</span> fadeInDown &#123;</span><br><span class="line">    <span class="number">0%</span> &#123;</span><br><span class="line">        -webkit-<span class="attribute">transform</span>: <span class="built_in">translate3d</span>(<span class="number">0</span>, -<span class="number">20%</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="number">100%</span> &#123;</span><br><span class="line">        -webkit-<span class="attribute">transform</span>: none;</span><br><span class="line">        <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>从右往左：</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.fadelogIn</span> &#123;</span><br><span class="line">    -webkit-<span class="attribute">animation</span>: fadelogIn .<span class="number">4s</span>;</span><br><span class="line">    <span class="attribute">animation</span>: fadelogIn .<span class="number">4s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@keyframes</span> fadelogIn &#123;</span><br><span class="line">    <span class="number">0%</span> &#123;</span><br><span class="line">        -webkit-<span class="attribute">transform</span>: <span class="built_in">translate3d</span>(<span class="number">0</span>, <span class="number">100%</span>, <span class="number">0</span>);</span><br><span class="line">        -webkit-<span class="attribute">transform</span>: <span class="built_in">translate3d</span>(<span class="number">0</span>, <span class="number">100%</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translate3d</span>(<span class="number">0</span>, <span class="number">100%</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translate3d</span>(<span class="number">0</span>, <span class="number">100%</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="number">100%</span> &#123;</span><br><span class="line">        -webkit-<span class="attribute">transform</span>: none;</span><br><span class="line">        <span class="attribute">transform</span>: none;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@-webkit-keyframes</span> fadelogIn &#123;</span><br><span class="line">    <span class="number">0%</span> &#123;</span><br><span class="line">        -webkit-<span class="attribute">transform</span>: <span class="built_in">translate3d</span>(<span class="number">0</span>, <span class="number">100%</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="number">100%</span> &#123;</span><br><span class="line">        -webkit-<span class="attribute">transform</span>: none;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>从右往左：</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.fadeleftIn</span> &#123;</span><br><span class="line">    -webkit-<span class="attribute">animation</span>: fadeleftIn .<span class="number">4s</span>;</span><br><span class="line">    <span class="attribute">animation</span>: fadeleftIn .<span class="number">4s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@keyframes</span> fadeleftIn &#123;</span><br><span class="line">    <span class="number">0%</span> &#123;</span><br><span class="line">        -webkit-<span class="attribute">transform</span>: <span class="built_in">translate3d</span>(<span class="number">100%</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        -webkit-<span class="attribute">transform</span>: <span class="built_in">translate3d</span>(<span class="number">100%</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translate3d</span>(<span class="number">100%</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translate3d</span>(<span class="number">100%</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="number">100%</span> &#123;</span><br><span class="line">        -webkit-<span class="attribute">transform</span>: none;</span><br><span class="line">        <span class="attribute">transform</span>: none;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@-webkit-keyframes</span> fadeleftIn &#123;</span><br><span class="line">    <span class="number">0%</span> &#123;</span><br><span class="line">        -webkit-<span class="attribute">transform</span>: <span class="built_in">translate3d</span>(<span class="number">100%</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="number">100%</span> &#123;</span><br><span class="line">        -webkit-<span class="attribute">transform</span>: none;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>放大：</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.popIn</span> &#123;</span><br><span class="line">    -webkit-<span class="attribute">animation</span>: fadeleftIn .<span class="number">4s</span>;</span><br><span class="line">    <span class="attribute">animation</span>: fadeleftIn .<span class="number">4s</span>;</span><br><span class="line">    -webkit-<span class="attribute">animation-name</span>: popIn;</span><br><span class="line">    <span class="attribute">animation-name</span>: popIn;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@-webkit-keyframes</span> popIn &#123;</span><br><span class="line">    <span class="number">0%</span> &#123;</span><br><span class="line">        -webkit-<span class="attribute">transform</span>: <span class="built_in">scale3d</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">scale3d</span>(<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.5</span>);</span><br><span class="line">        <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="number">50%</span> &#123;</span><br><span class="line">        -webkit-<span class="attribute">animation-timing-function</span>: <span class="built_in">cubic-bezier</span>(<span class="number">0.47</span>, <span class="number">0</span>, <span class="number">0.745</span>, <span class="number">0.715</span>);</span><br><span class="line">        <span class="attribute">animation-timing-function</span>: <span class="built_in">cubic-bezier</span>(<span class="number">0.47</span>, <span class="number">0</span>, <span class="number">0.745</span>, <span class="number">0.715</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="number">100%</span> &#123;</span><br><span class="line">        -webkit-<span class="attribute">transform</span>: <span class="built_in">scale3d</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">scale3d</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        -webkit-<span class="attribute">animation-timing-function</span>: <span class="built_in">cubic-bezier</span>(<span class="number">0.25</span>, <span class="number">0.46</span>, <span class="number">0.45</span>, <span class="number">0.94</span>);</span><br><span class="line">        <span class="attribute">animation-timing-function</span>: <span class="built_in">cubic-bezier</span>(<span class="number">0.25</span>, <span class="number">0.46</span>, <span class="number">0.45</span>, <span class="number">0.94</span>);</span><br><span class="line">        <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@keyframes</span> popIn &#123;</span><br><span class="line">    <span class="number">0%</span> &#123;</span><br><span class="line">        -webkit-<span class="attribute">transform</span>: <span class="built_in">scale3d</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">scale3d</span>(<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.5</span>);</span><br><span class="line">        <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="number">50%</span> &#123;</span><br><span class="line">        -webkit-<span class="attribute">animation-timing-function</span>: <span class="built_in">cubic-bezier</span>(<span class="number">0.47</span>, <span class="number">0</span>, <span class="number">0.745</span>, <span class="number">0.715</span>);</span><br><span class="line">        <span class="attribute">animation-timing-function</span>: <span class="built_in">cubic-bezier</span>(<span class="number">0.47</span>, <span class="number">0</span>, <span class="number">0.745</span>, <span class="number">0.715</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="number">100%</span> &#123;</span><br><span class="line">        -webkit-<span class="attribute">transform</span>: <span class="built_in">scale3d</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">scale3d</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        -webkit-<span class="attribute">animation-timing-function</span>: <span class="built_in">cubic-bezier</span>(<span class="number">0.25</span>, <span class="number">0.46</span>, <span class="number">0.45</span>, <span class="number">0.94</span>);</span><br><span class="line">        <span class="attribute">animation-timing-function</span>: <span class="built_in">cubic-bezier</span>(<span class="number">0.25</span>, <span class="number">0.46</span>, <span class="number">0.45</span>, <span class="number">0.94</span>);</span><br><span class="line">        <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>封装class一次性解决实现全屏功能</title>
      <link href="/2022/07/31/html5/%E5%AE%9E%E7%8E%B0%E5%85%A8%E5%B1%8F%E5%8A%9F%E8%83%BD/"/>
      <url>/2022/07/31/html5/%E5%AE%9E%E7%8E%B0%E5%85%A8%E5%B1%8F%E5%8A%9F%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="封装-class-一次性解决实现全屏功能"><a href="#封装-class-一次性解决实现全屏功能" class="headerlink" title="封装 class 一次性解决实现全屏功能"></a>封装 class 一次性解决实现全屏功能</h1><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>这里先给项目地址：<a href="https://github.com/kangkang123269/kate-demo/tree/main/html5/fullScreen-demo">地址</a></p><h3 id="支持全屏的-api"><a href="#支持全屏的-api" class="headerlink" title="支持全屏的 api"></a>支持全屏的 api</h3><ol><li>浏览器是否支持全屏模式：<code>document.fullscreenEnabled</code></li><li>使元素进入全屏模式：<code>Element.requestFullscreen()</code></li><li>退出全屏：<code>document.exitFullscreen()</code></li><li>检查当前是否有节点处于全屏状态：<code>document.fullscreenElement</code></li><li>进入全屏&#x2F;离开全屏，触发事件：<code>document.fullscreenchange</code></li><li>无法进入全屏时触发: <code>document.fullscreenerror</code></li></ol><h3 id="浏览器前缀："><a href="#浏览器前缀：" class="headerlink" title="浏览器前缀："></a>浏览器前缀：</h3><p>目前并不是所有的浏览器都实现了 API 的无前缀版本，所以我们需要针对不同浏览器，做一下 API 的兼容:</p><p>我们需要写成类的形式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 是否支持全屏+判断浏览器前缀</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Function</span>&#125; fn 不支持全屏的回调函数 这里设了一个默认值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title function_">isFullscreen</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> fullscreenEnabled;</span><br><span class="line">  <span class="comment">// 判断浏览器前缀</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="property">fullscreenEnabled</span>) &#123;</span><br><span class="line">    fullscreenEnabled = <span class="variable language_">document</span>.<span class="property">fullscreenEnabled</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="property">webkitFullscreenEnabled</span>) &#123;</span><br><span class="line">    fullscreenEnabled = <span class="variable language_">document</span>.<span class="property">webkitFullscreenEnabled</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">prefixName</span> = <span class="string">&#x27;webkit&#x27;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="property">mozFullScreenEnabled</span>) &#123;</span><br><span class="line">    fullscreenEnabled = <span class="variable language_">document</span>.<span class="property">mozFullScreenEnabled</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">prefixName</span> = <span class="string">&#x27;moz&#x27;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="property">msFullscreenEnabled</span>) &#123;</span><br><span class="line">    fullscreenEnabled = <span class="variable language_">document</span>.<span class="property">msFullscreenEnabled</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">prefixName</span> = <span class="string">&#x27;ms&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!fullscreenEnabled) &#123;</span><br><span class="line">    <span class="keyword">if</span> (fn !== <span class="literal">undefined</span>) <span class="title function_">fn</span>(); <span class="comment">// 执行不支持全屏的回调</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">isFullscreenData</span> = <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-浏览器是否支持全屏模式：document-fullscreenEnabled"><a href="#1-浏览器是否支持全屏模式：document-fullscreenEnabled" class="headerlink" title="1. 浏览器是否支持全屏模式：document.fullscreenEnabled"></a>1. 浏览器是否支持全屏模式：document.fullscreenEnabled</h3><p><code>document.fullscreenEnabled</code>属性返回一个布尔值，表示当前文档是否可以切换到全屏状态。</p><h3 id="2-使元素进入全屏模式：Element-requestFullscreen"><a href="#2-使元素进入全屏模式：Element-requestFullscreen" class="headerlink" title="2. 使元素进入全屏模式：Element.requestFullscreen()"></a>2. 使元素进入全屏模式：Element.requestFullscreen()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 将传进来的元素全屏</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">String</span>&#125; domName 要全屏的dom名称</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title class_">Fullscreen</span>(domName) &#123;</span><br><span class="line">  <span class="keyword">const</span> element = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(domName); <span class="comment">// 获取dom</span></span><br><span class="line">  <span class="keyword">const</span> methodName =</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">prefixName</span> === <span class="string">&#x27;&#x27;</span></span><br><span class="line">      ? <span class="string">&#x27;requestFullscreen&#x27;</span></span><br><span class="line">      : <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.prefixName&#125;</span>RequestFullScreen`</span>; <span class="comment">// API前缀</span></span><br><span class="line">  element[methodName](); <span class="comment">// 调用全屏</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-退出全屏：document-exitFullscreen"><a href="#3-退出全屏：document-exitFullscreen" class="headerlink" title="3. 退出全屏：document.exitFullscreen()"></a>3. 退出全屏：document.exitFullscreen()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">exitFullscreen</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> methodName =</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">prefixName</span> === <span class="string">&#x27;&#x27;</span></span><br><span class="line">      ? <span class="string">&#x27;exitFullscreen&#x27;</span></span><br><span class="line">      : <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.prefixName&#125;</span>ExitFullscreen`</span>; <span class="comment">// API 前缀</span></span><br><span class="line">  <span class="variable language_">document</span>[methodName](); <span class="comment">// 调用</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-检查当前是否有节点处于全屏状态：document-fullscreenElement"><a href="#4-检查当前是否有节点处于全屏状态：document-fullscreenElement" class="headerlink" title="4. 检查当前是否有节点处于全屏状态：document.fullscreenElement"></a>4. 检查当前是否有节点处于全屏状态：document.fullscreenElement</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 检测有没有元素处于全屏状态</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 布尔值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title function_">isElementFullScreen</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> fullscreenElement =</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">fullscreenElement</span> ||</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">msFullscreenElement</span> ||</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">mozFullScreenElement</span> ||</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">webkitFullscreenElement</span>; <span class="comment">// 有前缀的f是大写，没前缀是小写</span></span><br><span class="line">  <span class="keyword">if</span> (fullscreenElement === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 当前没有元素在全屏状态</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// 有元素在全屏状态</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>事实上，还有一个属性<code>document.fullscreen</code>，返回一个布尔值，表示文档是否处于全屏模式。</p><p>两个方法效果是一样，但因为 IE 不支持这个属性，所以这里用的是<code>document.fullscreenElement</code>.</p><h3 id="5-进入全屏-x2F-离开全屏，触发事件：document-fullscreenchange"><a href="#5-进入全屏-x2F-离开全屏，触发事件：document-fullscreenchange" class="headerlink" title="5. 进入全屏&#x2F;离开全屏，触发事件：document.fullscreenchange"></a>5. 进入全屏&#x2F;离开全屏，触发事件：document.fullscreenchange</h3><p>当我们进入全屏和离开全屏的时候，都会触发一个<code>fullscreenchange</code>事件。</p><blockquote><p>注意：此事件不会提供任何信息，表明是进入全屏或退出全屏。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 监听进入/离开全屏</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Function</span>&#125; enter 进入全屏的回调</span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@param</span> &#123;<span class="type">Function</span>&#125; quit 离开全屏的回调</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title function_">screenChange</span>(<span class="params">enter,quit</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">isFullscreenData</span>) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">const</span> methodName = <span class="string">`on<span class="subst">$&#123;<span class="variable language_">this</span>.prefixName&#125;</span>fullscreenchange`</span>;</span><br><span class="line">  <span class="variable language_">document</span>[methodName] = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">isElementFullScreen</span>()) &#123;</span><br><span class="line">      enter &amp;&amp; <span class="title function_">enter</span>(e); <span class="comment">// 进入全屏回调</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      quit &amp;&amp; <span class="title function_">quit</span>(e); <span class="comment">// 离开全屏的回调</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：多层全屏的情况</strong></p><ol><li>先进入左边全屏(进入全屏回调)，再进入红色全屏(进入全屏回调)</li><li>退出全屏,此时退出红色全屏，左边仍是全屏(触发进入全屏回调)</li><li>出现这种情况，可以在点击按钮的时候，做一些状态限制。或者根据全屏事件返回的 dom 信息来进行判断。</li></ol><h3 id="6-无法进入全屏时触发-document-fullscreenerror"><a href="#6-无法进入全屏时触发-document-fullscreenerror" class="headerlink" title="6. 无法进入全屏时触发: document.fullscreenerror"></a>6. 无法进入全屏时触发: document.fullscreenerror</h3><p>比如全屏请求不是在事件处理函数中调用,会在这里拦截到错误:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 浏览器无法进入全屏时触发</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Function</span>&#125; enterErrorFn 回调</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title function_">screenError</span>(<span class="params">enterErrorFn</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> methodName = <span class="string">`on<span class="subst">$&#123;<span class="variable language_">this</span>.prefixName&#125;</span>fullscreenerror`</span>;</span><br><span class="line">  <span class="variable language_">document</span>[methodName] = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">    enterErrorFn &amp;&amp; <span class="title function_">enterErrorFn</span>(e)</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Css：-全屏模式下的样式"><a href="#Css：-全屏模式下的样式" class="headerlink" title="Css： 全屏模式下的样式"></a>Css： 全屏模式下的样式</h3><ol><li>默认设置黑色背景</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:not</span>(<span class="selector-pseudo">:root</span>):-webkit-full-screen::backdrop &#123;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0px</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0px</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0px</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0px</span>;</span><br><span class="line">  <span class="attribute">background</span>: black; // 会将背景设为黑色的 如果你没为你的dom设置背景的话，全屏下会为黑色</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>默认样式：</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:not</span>(<span class="selector-pseudo">:root</span>):-webkit-full-screen &#123;</span><br><span class="line">  <span class="attribute">object-fit</span>: contain;</span><br><span class="line">  <span class="attribute">position</span>: fixed <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0px</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0px</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0px</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0px</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">min-width</span>: <span class="number">0px</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">max-width</span>: none <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">min-height</span>: <span class="number">0px</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">max-height</span>: none <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">transform</span>: none <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0px</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="全屏状态的-CSS："><a href="#全屏状态的-CSS：" class="headerlink" title="全屏状态的 CSS："></a>全屏状态的 CSS：</h3><p>全屏状态下，大多数浏览器的 CSS 支持:full-screen 伪类，只有 IE11 支持:fullscreen 伪类。使用这个伪类，可以对全屏状态设置单独的 CSS 属性。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 针对dom的全屏设置 */</span></span><br><span class="line"><span class="selector-class">.div</span>:-webkit-full-screen &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 全屏属性 */</span></span><br><span class="line">:-webkit-full-screen &#123;</span><br><span class="line">&#125;</span><br><span class="line">:-moz-full-screen &#123;</span><br><span class="line">&#125;</span><br><span class="line">:-ms-fullscreen &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 全屏伪类 当前chrome:70 不支持 */</span></span><br><span class="line">:full-screen &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-pseudo">:fullscreen</span> &#123;</span><br><span class="line">  <span class="comment">/* IE11支持 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考资料：阮一峰老师的<a href="https://javascript.ruanyifeng.com/htmlapi/fullscreen.html#toc0">Fullscreen API：全屏操作</a></p><p>这里是一条华丽的分割线，讲完原理开始实战</p><hr><h3 id="项目的-html"><a href="#项目的-html" class="headerlink" title="项目的 html"></a>项目的 html</h3><p>index.html：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./index.css&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;https://codesandbox.io/s/&quot;</span> <span class="attr">id</span>=<span class="string">&quot;iframe-one&quot;</span> <span class="attr">name</span>=<span class="string">&quot;iframe-one</span></span></span><br><span class="line"><span class="string"><span class="tag">      width=&quot;</span> <span class="attr">100</span>%&quot; <span class="attr">height</span>=<span class="string">&quot;200&quot;</span> <span class="attr">scrolling</span>=<span class="string">&quot;no&quot;</span> <span class="attr">frameborder</span>=<span class="string">&quot;0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;vscode.svg&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;iframeScreen()&quot;</span> <span class="attr">id</span>=<span class="string">&quot;vscode&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100&quot;</span> <span class="attr">height</span>=<span class="string">&quot;100&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="项目中的-css"><a href="#项目中的-css" class="headerlink" title="项目中的 css"></a>项目中的 css</h3><p>index.css：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#iframe-one</span> &#123;</span><br><span class="line">  // 随便是什么元素，一开始不展示元素</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 针对dom的全屏设置 */</span></span><br><span class="line"><span class="selector-class">.left</span>:-webkit-full-screen &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 全屏属性 */</span></span><br><span class="line">:-webkit-full-screen &#123;</span><br><span class="line">&#125;</span><br><span class="line">:-moz-full-screen &#123;</span><br><span class="line">&#125;</span><br><span class="line">:-ms-fullscreen &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 全屏伪类 当前chrome:70 不支持 */</span></span><br><span class="line">:full-screen &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-pseudo">:fullscreen</span> &#123;</span><br><span class="line">  <span class="comment">/* IE11支持 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="封装完成的-js-文件"><a href="#封装完成的-js-文件" class="headerlink" title="封装完成的 js 文件"></a>封装完成的 js 文件</h3><p>以后无论遇到什么全屏问题都可以用改封装得 class</p><p>index.js：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">fullScreen</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">    <span class="comment">// fn是失败的回调函数</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">prefixName</span> = <span class="string">&quot;&quot;</span>; <span class="comment">// 浏览器前缀</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">isFullscreenData</span> = <span class="literal">true</span>; <span class="comment">// 浏览器支持全屏</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">isFullscreen</span>(fn);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@description</span>: 是否支持全屏+判断浏览器前缀</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">Function</span>&#125; fn 不支持全屏的回调函数 这里设了一个默认值</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">isFullscreen</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> fullscreenEnabled; <span class="comment">// 是否支持全屏</span></span><br><span class="line">    <span class="comment">// 判断浏览器前缀</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="property">fullscreenEnabled</span>) &#123;</span><br><span class="line">      fullscreenEnabled = <span class="variable language_">document</span>.<span class="property">fullscreenEnabled</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="property">webkitFullscreenEnabled</span>) &#123;</span><br><span class="line">      fullscreenEnabled = <span class="variable language_">document</span>.<span class="property">webkitFullscreenEnabled</span>;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">prefixName</span> = <span class="string">&quot;webkit&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="property">mozFullScreenEnabled</span>) &#123;</span><br><span class="line">      fullscreenEnabled = <span class="variable language_">document</span>.<span class="property">mozFullScreenEnabled</span>;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">prefixName</span> = <span class="string">&quot;moz&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="property">msFullscreenEnabled</span>) &#123;</span><br><span class="line">      fullscreenEnabled = <span class="variable language_">document</span>.<span class="property">msFullscreenEnabled</span>;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">prefixName</span> = <span class="string">&quot;ms&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!fullscreenEnabled) &#123;</span><br><span class="line">      <span class="keyword">if</span> (fn !== <span class="literal">undefined</span>) <span class="title function_">fn</span>(); <span class="comment">// 执行不支持全屏的回调</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">isFullscreenData</span> = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@description</span>: 将传进来的元素全屏</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">String</span>&#125; domName 要全屏的dom名称</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title class_">Fullscreen</span>(element) &#123;</span><br><span class="line">    <span class="keyword">const</span> methodName =</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">prefixName</span> === <span class="string">&quot;&quot;</span></span><br><span class="line">        ? <span class="string">&quot;requestFullscreen&quot;</span></span><br><span class="line">        : <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.prefixName&#125;</span>RequestFullScreen`</span>; <span class="comment">// API前缀</span></span><br><span class="line">    element[methodName](); <span class="comment">// 调用全屏</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 退出全屏</span></span><br><span class="line">  <span class="title function_">exitFullscreen</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> methodName =</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">prefixName</span> === <span class="string">&quot;&quot;</span></span><br><span class="line">        ? <span class="string">&quot;exitFullscreen&quot;</span></span><br><span class="line">        : <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.prefixName&#125;</span>ExitFullscreen`</span>; <span class="comment">// API 前缀</span></span><br><span class="line">    <span class="variable language_">document</span>[methodName](); <span class="comment">// 调用</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@description</span>: 检测有没有元素处于全屏状态</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> 布尔值</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">isElementFullScreen</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> fullscreenElement =</span><br><span class="line">      <span class="variable language_">document</span>.<span class="property">fullscreenElement</span> ||</span><br><span class="line">      <span class="variable language_">document</span>.<span class="property">msFullscreenElement</span> ||</span><br><span class="line">      <span class="variable language_">document</span>.<span class="property">mozFullScreenElement</span> ||</span><br><span class="line">      <span class="variable language_">document</span>.<span class="property">webkitFullscreenElement</span>; <span class="comment">// 有前缀的f是大写，没前缀是小写</span></span><br><span class="line">    <span class="keyword">if</span> (fullscreenElement === <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 当前没有元素在全屏状态</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// 有元素在全屏状态</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@description</span>: 监听进入/离开全屏</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">Function</span>&#125; enter 进入全屏的回调</span></span><br><span class="line"><span class="comment">   *  <span class="doctag">@param</span> &#123;<span class="type">Function</span>&#125; quit 离开全屏的回调</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">screenChange</span>(<span class="params">enter, quit</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">isFullscreenData</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">const</span> methodName = <span class="string">`on<span class="subst">$&#123;<span class="variable language_">this</span>.prefixName&#125;</span>fullscreenchange`</span>;</span><br><span class="line">    <span class="variable language_">document</span>[methodName] = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">isElementFullScreen</span>()) &#123;</span><br><span class="line">        enter &amp;&amp; <span class="title function_">enter</span>(); <span class="comment">// 进入全屏回调</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        quit &amp;&amp; <span class="title function_">quit</span>(); <span class="comment">// 离开全屏的回调</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@description</span>: 浏览器无法进入全屏时触发</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">Function</span>&#125; enterErrorFn 回调</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">screenError</span>(<span class="params">enterErrorFn</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> methodName = <span class="string">`on<span class="subst">$&#123;<span class="variable language_">this</span>.prefixName&#125;</span>fullscreenerror`</span>;</span><br><span class="line">    <span class="variable language_">document</span>[methodName] = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">      enterErrorFn &amp;&amp; <span class="title function_">enterErrorFn</span>(e);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="对元素一开始显示或者隐藏处理"><a href="#对元素一开始显示或者隐藏处理" class="headerlink" title="对元素一开始显示或者隐藏处理"></a>对元素一开始显示或者隐藏处理</h3><p>这里可以这样处理调用<code>screenChange</code>方法，里面执行进入屏幕的回调和离开屏幕的回调，既进入显示，离开隐藏</p><p>index.js：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> full = <span class="keyword">new</span> <span class="title function_">fullScreen</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;不支持&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> iframe = &#123;</span><br><span class="line">  <span class="attr">enter</span>: <span class="keyword">function</span> (<span class="params">element</span>) &#123;</span><br><span class="line">    <span class="comment">// 显示</span></span><br><span class="line">    element.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&quot;block&quot;</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">quit</span>: <span class="keyword">function</span> (<span class="params">element</span>) &#123;</span><br><span class="line">    <span class="comment">// 隐藏</span></span><br><span class="line">    element.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&quot;none&quot;</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">iframeScreen</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> element = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#iframe-one&quot;</span>);</span><br><span class="line">  full.<span class="title class_">Fullscreen</span>(element);</span><br><span class="line">  full.<span class="title function_">screenChange</span>(</span><br><span class="line">    <span class="function">() =&gt;</span> iframe.<span class="title function_">enter</span>(element),</span><br><span class="line">    <span class="function">() =&gt;</span> iframe.<span class="title function_">quit</span>(element)</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> html </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初识vite插件(篇一)</title>
      <link href="/2022/07/29/vite/%E5%88%9D%E8%AF%86vite%E6%8F%92%E4%BB%B6/"/>
      <url>/2022/07/29/vite/%E5%88%9D%E8%AF%86vite%E6%8F%92%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="初识vite插件-篇一"><a href="#初识vite插件-篇一" class="headerlink" title="初识vite插件(篇一)"></a>初识vite插件(篇一)</h1><h3 id="vite插件形式"><a href="#vite插件形式" class="headerlink" title="vite插件形式"></a>vite插件形式</h3><p>先举个简单的例子来认识下vite插件的结构：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">myExample</span> () &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;my-example&#x27;</span>, <span class="comment">// 名称用于警告和错误展示</span></span><br><span class="line">    resolveId ( source ) &#123;</span><br><span class="line">      <span class="keyword">if</span> (source === <span class="string">&#x27;virtual-module&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> source; <span class="comment">// 返回source表明命中，vite不再询问其他插件处理该id请求</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>; <span class="comment">// 返回null表明是其他id要继续处理</span></span><br><span class="line">    &#125;,</span><br><span class="line">    load ( id ) &#123;</span><br><span class="line">      <span class="keyword">if</span> (id === <span class="string">&#x27;virtual-module&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;export default &quot;This is virtual!&quot;&#x27;</span>; <span class="comment">// 返回&quot;virtual-module&quot;模块源码</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>; <span class="comment">// 其他id继续处理</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="通用钩子"><a href="#通用钩子" class="headerlink" title="通用钩子"></a>通用钩子</h3><p>下面钩子会在服务器启动时调用一次:</p><ul><li><code>options</code> 替换或操纵rollup选项</li><li><code>buildStart</code> 开始创建</li></ul><p>下面钩子每次有模块请求时都会被调用:</p><ul><li><code>resolveId</code> 创建自定义确认函数，常用语定位第三方依赖</li><li><code>load</code> 创建自定义加载函数，可用于返回自定义的内容</li><li><code>transform</code> 可用于转换已加载的模块内容</li></ul><p>下面钩子会在服务器关闭时调用一次:</p><ul><li>buildEnd</li><li>closeBundle</li></ul><h3 id="Vite特有钩子"><a href="#Vite特有钩子" class="headerlink" title="Vite特有钩子"></a>Vite特有钩子</h3><ul><li><code>config</code>: 修改Vite配置</li><li><code>configResolved</code>：Vite配置确认</li><li><code>configureServer</code>：用于配置dev server</li><li><code>transformIndexHtml</code>：用于转换宿主页</li><li><code>handleHotUpdate</code>：自定义HMR更新时调用</li></ul><p>那我们去走一下钩子的顺序：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">myExample</span> () &#123;</span><br><span class="line">  <span class="comment">// 返回的是插件对象</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;hooks-order&#x27;</span>, </span><br><span class="line">    <span class="comment">// 初始化hooks，只走一次</span></span><br><span class="line">    <span class="title function_">options</span>(<span class="params">opts</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;options&#x27;</span>, opts);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">buildStart</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;buildStart&#x27;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// vite特有钩子</span></span><br><span class="line">    <span class="title function_">config</span>(<span class="params">config</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;config&#x27;</span>, config);</span><br><span class="line">      <span class="keyword">return</span> &#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">configResolved</span>(<span class="params">resolvedCofnig</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;configResolved&#x27;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">configureServer</span>(<span class="params">server</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;configureServer&#x27;</span>);</span><br><span class="line">      <span class="comment">// server.app.use((req, res, next) =&gt; &#123;</span></span><br><span class="line">      <span class="comment">//   // custom handle request...</span></span><br><span class="line">      <span class="comment">// &#125;)</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">transformIndexHtml</span>(<span class="params">html</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;transformIndexHtml&#x27;</span>);</span><br><span class="line">      <span class="keyword">return</span> html</span><br><span class="line">      <span class="comment">// return html.replace(</span></span><br><span class="line">      <span class="comment">//   /&lt;title&gt;(.*?)&lt;\/title&gt;/,</span></span><br><span class="line">      <span class="comment">//   `&lt;title&gt;Title replaced!&lt;/title&gt;`</span></span><br><span class="line">      <span class="comment">// )</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 通用钩子</span></span><br><span class="line">    resolveId ( source ) &#123;</span><br><span class="line">      <span class="keyword">if</span> (source === <span class="string">&#x27;virtual-module&#x27;</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;resolvedId&#x27;</span>, source);</span><br><span class="line">        <span class="keyword">return</span> source; </span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>; </span><br><span class="line">    &#125;,</span><br><span class="line">    load ( id ) &#123;</span><br><span class="line">      <span class="keyword">if</span> (id === <span class="string">&#x27;virtual-module&#x27;</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;load&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;export default &quot;This is virtual!&quot;&#x27;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">transform</span>(<span class="params">code, id</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (id === <span class="string">&#x27;virtual-module&#x27;</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;transform&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> code</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行顺序：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// config -&gt; configResolved -&gt; options -&gt; configureServer -&gt; </span></span><br><span class="line"><span class="comment">// buildStart -&gt; Vite dev server ready -&gt; transformIndexHtml </span></span><br><span class="line"><span class="comment">// -&gt; resolvedId -&gt; load -&gt; transform</span></span><br></pre></td></tr></table></figure><h3 id="插件顺序"><a href="#插件顺序" class="headerlink" title="插件顺序"></a>插件顺序</h3><ul><li>别名处理Alias</li><li>用户插件设置enforce: ‘pre’</li><li>Vite核心插件</li><li>用户插件未设置enforce</li><li>Vite构建插件</li><li>用户插件设置enforce: ‘post’</li><li>Vite构建后置插件(minify, manifest, reporting)</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端工程化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vite </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手写一个vite mock插件（篇二）</title>
      <link href="/2022/07/29/vite/vite-mock-plugin/"/>
      <url>/2022/07/29/vite/vite-mock-plugin/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="手写一个vite-mock插件（篇二）"><a href="#手写一个vite-mock插件（篇二）" class="headerlink" title="手写一个vite mock插件（篇二）"></a>手写一个vite mock插件（篇二）</h1><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>这里先给demo地址，可以直接看源码：<a href="https://github.com/kangkang123269/kate-demo/tree/main/vite/vite-mock-plugin">demo地址</a></p><h3 id="编写思路"><a href="#编写思路" class="headerlink" title="编写思路"></a>编写思路</h3><ul><li>一开始干嘛？初始化。mock插件初始化什么，入口和能支持mock能力的devServer</li><li>初始化完了，发现是不是有post，get等方法的路由请求，需不要给它分类？需要</li><li>那怎么分类？考完重构一个对象的能力，是不是<code>so easy</code>.</li><li>分为类是不是需要判断是否有效？有效就返回mock数据，无效执行下一个中间件</li><li>前期这样想完全没有问题。</li></ul><p>来一条华丽的分割线</p><hr><p>后期发现问题：</p><ul><li>发现中间件的next方法和res.send方法同时执行或导致程序中断</li></ul><p>解决这个问题我们需要判断路由是否有效，且不能在无效的时候去send和mock（假装自己知道就好了）</p><ul><li>send函数在请求的时候需要给相应的信息，所以需要二次封装</li></ul><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>我们从<a href="https://juejin.cn/post/7125746860567822350">vite初始篇一</a>开始了解vite插件的钩子，我们需要开启一个服务去支持mock能力，需要用到<code>devServer</code>，很明显我们需要在<code>configureServer</code>这个钩子里面写，且需要mock数据的路径</p><p>所以我们初始化的插件函数需要做两件事情：</p><ul><li>需要options参数入口，且为空的时候要给默认的入口</li><li>在return的对象要用到<code>configureServer</code>的<code>server.middlewares</code></li></ul><blockquote><p>server.middlewares相当于<code>express</code>的<code>app</code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> (<span class="params">options = &#123;&#125;</span>) &#123;</span><br><span class="line">  <span class="comment">// 获取mock文件入口，默认index</span></span><br><span class="line">  options.<span class="property">entry</span> = options.<span class="property">entry</span> || <span class="string">&#x27;./mock/index.js&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 转换为绝对路径</span></span><br><span class="line">  <span class="keyword">if</span> (!path.<span class="title function_">isAbsolute</span>(options.<span class="property">entry</span>)) &#123;</span><br><span class="line">    options.<span class="property">entry</span> = path.<span class="title function_">resolve</span>(process.<span class="title function_">cwd</span>(), options.<span class="property">entry</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">configureServer</span>: <span class="keyword">function</span> (<span class="params">&#123; middlewares: app &#125;</span>) &#123;</span><br><span class="line">        <span class="comment">// 定义中间件：路由匹配</span></span><br><span class="line">      <span class="keyword">const</span> <span class="title function_">middleware</span> = (<span class="params">req, res, next</span>) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">      &#125;;</span><br><span class="line">      app.<span class="title function_">use</span>(middleware);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再给我们的mock也初始下,下面看到我们是用的ES Moudle抛出方式，因为vite是不支持commonJS模块。所以我们需要用到<code>export default</code>，不能用到<code>module.exports</code>，本人亲测自己写一个支持require的插件也作用不到<code>mock</code>这个插件。（一个伤心的经历）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /mock/index.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/api/users&#x27;</span>,</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">    <span class="attr">response</span>: <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> res.<span class="title function_">send</span>([</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">username</span>: <span class="string">&#x27;tom&#x27;</span>,</span><br><span class="line">          <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">username</span>: <span class="string">&#x27;Tom&#x27;</span>,</span><br><span class="line">          <span class="attr">age</span>: <span class="number">19</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      ]);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h3 id="创建路由表"><a href="#创建路由表" class="headerlink" title="创建路由表"></a>创建路由表</h3><p>我们需要的路由表是这种结构，一个方法对应多个路由，所以我们需要创建路由表。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;get&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/api/1&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;get&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;response&quot;</span><span class="punctuation">:</span> function </span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/api/2&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;get&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;response&quot;</span><span class="punctuation">:</span> function </span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;post&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/api/1&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;get&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;response&quot;</span><span class="punctuation">:</span> function </span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/api/2&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;get&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;response&quot;</span><span class="punctuation">:</span> function </span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>首先获取路由，我们不能用require，所以用import. 但import是异步的，那么我们需要加上async&#x2F;await等待加载完模块，用解构的方式获取mockObj</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">configureServer</span>: <span class="keyword">function</span> (<span class="params">&#123; middlewares: app &#125;</span>) &#123;</span><br><span class="line">        <span class="comment">// 定义路由表</span></span><br><span class="line">        <span class="keyword">const</span> mockObj = &#123; ...(<span class="keyword">await</span> <span class="title function_">import</span>(options.<span class="property">entry</span>)) &#125;.<span class="property">default</span>;</span><br><span class="line">        <span class="comment">// 创建路由表</span></span><br><span class="line">        <span class="title function_">createRoute</span>(mockObj);</span><br><span class="line"></span><br><span class="line">        ....</span><br><span class="line">         <span class="comment">// 定义中间件：路由匹配</span></span><br><span class="line">        <span class="keyword">const</span> <span class="title function_">middleware</span> = (<span class="params">req, res, next</span>) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line">        app.<span class="title function_">use</span>(middleware)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>那么我们现在开始写<code>createRoute</code>函数，多尝试，也就一个简单的变量处理，下列写成函数如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createRoute</span>(<span class="params">mockConfList</span>) &#123;</span><br><span class="line">  mockConfList.<span class="title function_">forEach</span>(<span class="function">(<span class="params">mockConf</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> method = mockConf.<span class="property">type</span> || <span class="string">&#x27;get&#x27;</span>;</span><br><span class="line">    <span class="keyword">let</span> path = mockConf.<span class="property">url</span>;</span><br><span class="line">    <span class="keyword">let</span> handler = mockConf.<span class="property">response</span>;</span><br><span class="line">    <span class="comment">// 路由对象</span></span><br><span class="line">    <span class="keyword">let</span> route = &#123; path, <span class="attr">method</span>: method.<span class="title function_">toLowerCase</span>(), handler &#125;;</span><br><span class="line">    <span class="comment">// 如果没有改请求方法就初始化为空数组</span></span><br><span class="line">    <span class="keyword">if</span> (!mockRouteMap[method]) &#123;</span><br><span class="line">      mockRouteMap[method] = [];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;create mock api: &#x27;</span>, route.<span class="property">method</span>, route.<span class="property">path</span>);</span><br><span class="line">    <span class="comment">// 存入映射对象中</span></span><br><span class="line">    mockRouteMap[method].<span class="title function_">push</span>(route);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建完路由表，需要中间件里面的逻辑,也就是破路由和send数据到路由上面了。</p><h3 id="执行匹配路由和自定义send"><a href="#执行匹配路由和自定义send" class="headerlink" title="执行匹配路由和自定义send"></a>执行匹配路由和自定义send</h3><p>我们接下的逻辑可以这样写，先获取路由匹配的结果，如果匹配成功就send </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">configureServer</span>: <span class="keyword">async</span> <span class="keyword">function</span> (<span class="params">&#123; middlewares: app &#125;</span>) &#123;</span><br><span class="line">      <span class="comment">// 定义路由表</span></span><br><span class="line">      <span class="keyword">const</span> mockObj = &#123; ...(<span class="keyword">await</span> <span class="title function_">import</span>(options.<span class="property">entry</span>)) &#125;.<span class="property">default</span>;</span><br><span class="line">      <span class="comment">// 创建路由表</span></span><br><span class="line">      <span class="title function_">createRoute</span>(mockObj);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 定义中间件：路由匹配</span></span><br><span class="line">      <span class="keyword">const</span> <span class="title function_">middleware</span> = (<span class="params">req, res, next</span>) =&gt; &#123;</span><br><span class="line">        <span class="comment">// 1. 执行匹配过程</span></span><br><span class="line">        <span class="keyword">let</span> route = <span class="title function_">matchRoute</span>(req);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 存在匹配，则这个是一个mock请求</span></span><br><span class="line">        <span class="keyword">if</span> (route) &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;mock request&#x27;</span>, route.<span class="property">method</span>, route.<span class="property">path</span>);</span><br><span class="line">          <span class="comment">// 自定义send</span></span><br><span class="line">          res.<span class="property">send</span> = send;</span><br><span class="line">          <span class="comment">// 执行路由的`response`回调函数，可以把代码往前翻</span></span><br><span class="line">          route.<span class="title function_">handler</span>(req, res);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="title function_">next</span>();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">      app.<span class="title function_">use</span>(middleware);</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h4 id="匹配路由"><a href="#匹配路由" class="headerlink" title="匹配路由"></a>匹配路由</h4><p>根据我们浏览器请求的路由去匹配路由信息</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">matchRoute</span>(<span class="params">req</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> url = req.<span class="property">url</span>;</span><br><span class="line">  <span class="keyword">let</span> method = req.<span class="property">method</span>.<span class="title function_">toLowerCase</span>();</span><br><span class="line">  <span class="keyword">let</span> routeList = mockRouteMap[method];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> routeList &amp;&amp; routeList.<span class="title function_">find</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> item.<span class="property">path</span> === url);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们请求一个试下：</p><p><code>成功匹配</code>:</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e09bdc4eda6c458c90290fef6420279b~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h4 id="自定义send"><a href="#自定义send" class="headerlink" title="自定义send"></a>自定义send</h4><p>这里自定义send我们可以添加请求头字段，能够知道请求的东西的类型，长度等信息</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">send</span>(<span class="params">body</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> chunk = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(body);</span><br><span class="line">  <span class="comment">// Content-Length</span></span><br><span class="line">  <span class="keyword">if</span> (chunk) &#123;</span><br><span class="line">    chunk = <span class="title class_">Buffer</span>.<span class="title function_">from</span>(chunk, <span class="string">&#x27;utf-8&#x27;</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setHeader</span>(<span class="string">&#x27;Content-Length&#x27;</span>, chunk.<span class="property">length</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// content-type</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">setHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;application/json&#x27;</span>);</span><br><span class="line">  <span class="comment">// status</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">statusCode</span> = <span class="number">200</span>;</span><br><span class="line">  <span class="comment">// response</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">end</span>(chunk, <span class="string">&#x27;utf8&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>vite插件的掌握还是需要写些插件，看看别人的源码，了解为什么这么写，自己之后可以这样写。根据自己需求出去，应用到实践中去。</p>]]></content>
      
      
      <categories>
          
          <category> 前端工程化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vite </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker基础学习</title>
      <link href="/2022/07/28/docker/docker%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/07/28/docker/docker%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="docker-基础学习——（篇一）"><a href="#docker-基础学习——（篇一）" class="headerlink" title="docker 基础学习——（篇一）"></a>docker 基础学习——（篇一）</h1><h3 id="安装-Docker"><a href="#安装-Docker" class="headerlink" title="安装 Docker"></a>安装 Docker</h3><ul><li>Mac：<a href="https://download.docker.com/mac/stable/Docker.dmg">download.docker.com&#x2F;mac&#x2F;stable&#x2F;…</a></li><li>Windows：[download.docker.com&#x2F;win&#x2F;stable&#x2F;…](<a href="https://download.docker.com/win/stable/Docker">https://download.docker.com/win/stable/Docker</a> for Windows Installer.exe)</li><li>Linux：<a href="https://get.docker.com/">get.docker.com&#x2F;</a></li></ul><h3 id="Docker-的组成部分"><a href="#Docker-的组成部分" class="headerlink" title="Docker 的组成部分"></a>Docker 的组成部分</h3><ul><li>镜像(image)<ul><li>docker 镜像就好像是一个模板，可以通过这个模板来创建出来容器的服务，mysql 镜像—&gt;run 命令—&gt;mysql 容器(提供 mysql 服务)</li><li>通过这个镜像可以创建多个容器(最终服务运行或者项目运行就在容器中的)</li></ul></li><li>容器(container)<ul><li>Docker 利用容器技术，独立运行一个或者一个组应用，通过镜像进行创建</li><li>启动，停止，删除，基本命令</li><li>目前就可以把这个容器理解为就是一个简易的 linux 系统</li></ul></li><li>仓库(repository)<ul><li>仓库就是存放镜像的地方</li><li>仓库分为公有仓库和私有仓库</li><li>Docker Hub(默认是国外的)</li><li>阿里云……都有容器服务器(配置镜像加速)</li></ul></li></ul><h4 id="docker-的运行"><a href="#docker-的运行" class="headerlink" title="docker 的运行"></a><strong>docker 的运行</strong></h4><ul><li><p>run 命令执行后到底发生了什么？</p><p><strong>在执行了 docker 这个命令后，从 client 端发送到 server 这个服务端，在服务中进行执行，这样首先 docker 会在本地进行查找，看看镜像是不是存在，存在直接运行，不存在的话，会发送指令到 docker-hub 中，进行查找，若找到了就进行下载，若没有找到，会从服务端返回错误信息，假设找到了，下载到本地，本地就会加载这个镜像，运行起来。</strong></p></li><li><p><strong>底层原理</strong></p><ul><li>docker 是一个 Client-Server 结构的系统，docker 的守护进程运行在主机上，通过 socket 从客户端进行访问</li><li>Docker-server 接收到 docker-client 的指令，就会执行这个命令</li></ul></li></ul><h3 id="docker-一些基础的命令"><a href="#docker-一些基础的命令" class="headerlink" title="docker 一些基础的命令"></a>docker 一些基础的命令</h3><h4 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h4><ul><li>查看所有的镜像列表</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><ul><li>搜索镜像</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search 镜像名称</span><br></pre></td></tr></table></figure><ul><li>下载镜像</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker pull 镜像名称</span><br><span class="line">docker pull 镜像名称:tag</span><br></pre></td></tr></table></figure><ul><li>删除镜像</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rmi -------remove image</span><br><span class="line">Docker rmi -f 镜像id/镜像名称                删除一个镜像</span><br><span class="line">Docker rmi -f 镜像id 镜像id  镜像id        删除多个镜像</span><br><span class="line">Docker rmi -f  $(docker images -aq)     删除所有镜像</span><br></pre></td></tr></table></figure><h4 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h4><ul><li><strong>下载容器</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull centos</span><br></pre></td></tr></table></figure><ul><li><strong>新建容器并启动</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Docker run [可选参数] image</span><br></pre></td></tr></table></figure><p>可选参数：</p><ul><li><code>--name = &quot;Name&quot;</code> 给容器起名字 centos1 centos2 用来区分容器</li><li><code>-d</code> 后台的方式进行运行</li><li><code>-it</code> 使用交互式的运行方式，进入容器后查看内容</li><li><code>-p</code> 指定容器的端口 -p 8080：8080<ul><li>四种端口的指定方式<ul><li>-p ip:主机端口:容器端口</li><li><strong>-p</strong> <strong>主机端口：容器端口</strong> <strong>（最常用）</strong></li><li>-p 容器端口</li><li>端口号</li></ul></li></ul></li><li><strong>列出所有运行的容器</strong><ul><li><code>无参数</code> 列出当前正在运行的容器</li><li><code>-a</code> 列出当前正在运行的容器+带出历史运行过的容器</li><li><code>-n=？</code> 显示最近创建的容器</li><li><code>-q</code> 只显示容器的编号</li></ul></li><li><strong>退出容器</strong><ul><li>Exit 直接容器停止并且退出了</li><li>Ctrl+Q 容器不停止但是退出了</li></ul></li><li><strong>删除容器</strong><ul><li><code>Docker rm</code> 容器 id</li><li><code>Docker rm</code> 容器 id 容器 id(删除多个)</li><li><code>Docker rm -f $(docker ps -aq)</code><ul><li>Docker ps -a -q|xargs docker rm 管道的方式删除所有的容器</li><li>-f 是强制删除</li></ul></li></ul></li><li><strong>启动和停止容器的操作</strong><ul><li>启动<ul><li>docker start 容器 id</li></ul></li><li>重启容器<ul><li>docker restart 容器 id</li></ul></li><li>停止容器<ul><li>docker stop 容器 id</li></ul></li><li>杀掉容器<ul><li>docker kill 容器 id</li></ul></li></ul></li></ul><h4 id="其他常见命令"><a href="#其他常见命令" class="headerlink" title="其他常见命令"></a>其他常见命令</h4><ul><li><p>后台启动容器</p><ul><li><code>Docker run -d</code> 镜像名<ul><li>问题：docker ps 发现 centos 停止了</li><li>常见的坑：docker 容器使用后台运行，就必须要有一个前台进程，docker 发现没有应用，就会自动提停止<ul><li>通俗的理解就是：我们在 run centos 的时候，之前会切换到容器之中让我们进行操作，但是-d 直接从后台进行启动，docker 会检测到这个部分是没有人操作或者容器没有动静，自己就会将相应的资源进行停止</li><li>所以 nginx 容器启动后，发现自己没有提供服务，就会立刻停止，就是没有程序了</li></ul></li></ul></li></ul></li><li><p>查看日志</p><ul><li>Docker logs -tf –tail 10 容器 id</li></ul></li><li><p>测试</p><ul><li>自己编写一段 shell 脚本让程序在后台自己跑<ul><li>Docker run -d centos &#x2F;bin&#x2F;sh -c “while true;do echo hahaha;sleep 1;done”</li></ul></li><li>docker ps</li><li>Docker logs -tf –tail 10 容器 id</li></ul></li><li><p>查看容器内部的进程信息</p><ul><li>top 命令<ul><li>docker top 容器 id</li></ul></li></ul></li><li><p>查看容器的元数据</p><ul><li>docker inspect 容器 id</li></ul></li><li><p>进入当前正在运行的容器</p><ul><li>exec<ul><li>通常情况下的容器都是在后台方式运行的，需要我们进入容器 ，修改一些配置</li></ul></li></ul></li><li><p>查看历史命令</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker history 镜像id</span><br></pre></td></tr></table></figure><h4 id="分层理解"><a href="#分层理解" class="headerlink" title="分层理解"></a>分层理解</h4><ul><li>分层的镜像<ul><li>我们可以去下载一个镜像，注意观察下载日志的输出，可以看到的是一层一层的下载</li></ul></li><li>思考：为什么 Docker 镜像要采用这种分层的结构那？<ul><li>最大的好处，我觉得莫过于资源共享！比如有多个镜像团队都从相同的 Base 镜像构建而来，那么宿主机只需要在磁盘中保留一份 base 镜像，同时内存中也只需要加载一份 base 镜像，这样就可以为所有的容器服务了，而且镜像的每一层都可以被共享。</li></ul></li></ul><h4 id="commit-镜像"><a href="#commit-镜像" class="headerlink" title="commit 镜像"></a>commit 镜像</h4><p>Docker commit 提交容器成为一个新的副本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Docker commit -m=&quot;提交的描述信息&quot; -a=&quot;作者&quot; 容器id 目标镜像:[Tag]</span><br></pre></td></tr></table></figure><ul><li>实战测试<ul><li>启动一个默认的 tomcat</li><li>发现这个 tomcat 是没写 webapps 应用的，镜像的原因，官方镜像默认 webapps 下面是没有东西的</li><li>自己拷贝文件进去</li><li>将我们修改过的镜像提交成一个新的镜像</li></ul></li></ul><blockquote><p>推荐学习：<a href="https://juejin.cn/post/6977180684376866847">https://juejin.cn/post/6977180684376866847</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js实现拖拽功能</title>
      <link href="/2022/07/28/javascript/js%E5%AE%9E%E7%8E%B0%E6%8B%96%E6%8B%BD/"/>
      <url>/2022/07/28/javascript/js%E5%AE%9E%E7%8E%B0%E6%8B%96%E6%8B%BD/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="js实现拖拽功能"><a href="#js实现拖拽功能" class="headerlink" title="js实现拖拽功能"></a>js实现拖拽功能</h1><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><ul><li>能移动dom元素的位置，肯定与它的(x,y)坐标有关及改变dom元素的（left,top）的大小</li><li>那怎么监听鼠标的（x,y）这里用的事件是鼠标移动事件<code>onmousemove</code>、按压事件<code>mousedown</code>及松开事件<code>onmouseup</code></li><li>那我们大胆的想一下接下来通过鼠标的怎么控制它移动的呢<ul><li>元素肯定先绑定鼠标按压事件<code>mousedown</code></li><li>在按压事件触发后，我们在监听鼠标移动事件<code>onmousemove</code>，鼠标移动的（x,y）貌似是dom元素位置(x,y)，这其实需要减去鼠标在dom元素的(x,y)才是</li><li>最后鼠标松开事件<code>onmouseup</code>清除所有事件，以免否则鼠标抬起后还可以继续拖拽方块</li></ul></li></ul><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><ul><li>这里头部引入jQuery更好的dom操作</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/jquery/3.6.0/jquery.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>需要再页面中初始化drag的位置</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- index.html --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;drag&quot;</span> <span class="attr">style</span>=<span class="string">&quot;left: 0; top: 0&quot;</span>&gt;</span>按住拖动<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>初始化css</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// index<span class="selector-class">.css</span></span><br><span class="line"><span class="selector-class">.drag</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: skyblue;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>初始化js，获取dom原生</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">let</span> dragDiv = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;drag&#x27;</span>)[<span class="number">0</span>];</span><br></pre></td></tr></table></figure><h3 id="绑定鼠标按下事件"><a href="#绑定鼠标按下事件" class="headerlink" title="绑定鼠标按下事件"></a>绑定鼠标按下事件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dragDiv.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mousedown&#x27;</span>, putDown, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><h3 id="编写putDown里面的逻辑"><a href="#编写putDown里面的逻辑" class="headerlink" title="编写putDown里面的逻辑"></a>编写putDown里面的逻辑</h3><ul><li>这里面就是计算dom元素的（left,top）</li><li>之后清除所有事件</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> putDown = <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">  dragDiv.<span class="property">style</span>.<span class="property">cursor</span> = <span class="string">&#x27;pointer&#x27;</span>;</span><br><span class="line">  <span class="keyword">let</span> offsetX = <span class="built_in">parseInt</span>(dragDiv.<span class="property">style</span>.<span class="property">left</span>); <span class="comment">// 获取当前的x轴距离</span></span><br><span class="line">  <span class="keyword">let</span> offsetY = <span class="built_in">parseInt</span>(dragDiv.<span class="property">style</span>.<span class="property">top</span>); <span class="comment">// 获取当前的y轴距离</span></span><br><span class="line">  <span class="keyword">let</span> innerX = event.<span class="property">clientX</span> - offsetX; <span class="comment">// 获取鼠标在方块内的x轴距</span></span><br><span class="line">  <span class="keyword">let</span> innerY = event.<span class="property">clientY</span> - offsetY; <span class="comment">// 获取鼠标在方块内的y轴距</span></span><br><span class="line">  <span class="comment">// 按住鼠标时为div添加一个border</span></span><br><span class="line">  dragDiv.<span class="property">style</span>.<span class="property">borderStyle</span> = <span class="string">&#x27;solid&#x27;</span>;</span><br><span class="line">  dragDiv.<span class="property">style</span>.<span class="property">borderColor</span> = <span class="string">&#x27;red&#x27;</span>;</span><br><span class="line">  dragDiv.<span class="property">style</span>.<span class="property">borderWidth</span> = <span class="string">&#x27;3px&#x27;</span>;</span><br><span class="line">  <span class="comment">// 鼠标移动的时候不停的修改div的left和top值</span></span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">onmousemove</span> = <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">    dragDiv.<span class="property">style</span>.<span class="property">left</span> = event.<span class="property">clientX</span> - innerX + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">    dragDiv.<span class="property">style</span>.<span class="property">top</span> = event.<span class="property">clientY</span> - innerY + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">    <span class="comment">// 边界判断</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">parseInt</span>(dragDiv.<span class="property">style</span>.<span class="property">left</span>) &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">      dragDiv.<span class="property">style</span>.<span class="property">left</span> = <span class="string">&#x27;0px&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">parseInt</span>(dragDiv.<span class="property">style</span>.<span class="property">top</span>) &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">      dragDiv.<span class="property">style</span>.<span class="property">top</span> = <span class="string">&#x27;0px&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      <span class="built_in">parseInt</span>(dragDiv.<span class="property">style</span>.<span class="property">left</span>) &gt;=</span><br><span class="line">      <span class="variable language_">window</span>.<span class="property">innerWidth</span> - <span class="built_in">parseInt</span>(dragDiv.<span class="property">style</span>.<span class="property">width</span>)</span><br><span class="line">    ) &#123;</span><br><span class="line">      dragDiv.<span class="property">style</span>.<span class="property">left</span> =</span><br><span class="line">        <span class="variable language_">window</span>.<span class="property">innerWidth</span> - <span class="built_in">parseInt</span>(dragDiv.<span class="property">style</span>.<span class="property">width</span>) + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      <span class="built_in">parseInt</span>(dragDiv.<span class="property">style</span>.<span class="property">top</span>) &gt;=</span><br><span class="line">      <span class="variable language_">window</span>.<span class="property">innerHeight</span> - <span class="built_in">parseInt</span>(dragDiv.<span class="property">style</span>.<span class="property">height</span>)</span><br><span class="line">    ) &#123;</span><br><span class="line">      dragDiv.<span class="property">style</span>.<span class="property">top</span> =</span><br><span class="line">        <span class="variable language_">window</span>.<span class="property">innerHeight</span> - <span class="built_in">parseInt</span>(dragDiv.<span class="property">style</span>.<span class="property">height</span>) + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 鼠标抬起时，清除绑定在文档上的mousemove和mouseup事件</span></span><br><span class="line">  <span class="comment">// 否则鼠标抬起后还可以继续拖拽方块</span></span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">onmouseup</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">onmousemove</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">onmouseup</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">// 清除border</span></span><br><span class="line">    dragDiv.<span class="property">style</span>.<span class="property">borderStyle</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    dragDiv.<span class="property">style</span>.<span class="property">borderColor</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    dragDiv.<span class="property">style</span>.<span class="property">borderWidth</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>项目地址在这：<a href="https://github.com/kangkang123269/kate-demo/tree/main/jQuery">实现拖拽的demo</a></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
          <category> demo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一行代码的JavaScript</title>
      <link href="/2022/07/27/skill/%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81%E7%9A%84JavaScript/"/>
      <url>/2022/07/27/skill/%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81%E7%9A%84JavaScript/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="一行代码的JavaScript"><a href="#一行代码的JavaScript" class="headerlink" title="一行代码的JavaScript"></a>一行代码的JavaScript</h1><h3 id="1、获取字符串中的字符数"><a href="#1、获取字符串中的字符数" class="headerlink" title="1、获取字符串中的字符数"></a>1、获取字符串中的字符数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">characterCount</span> = (<span class="params">str, char</span>) =&gt; str.<span class="title function_">split</span>(char).<span class="property">length</span> - <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="2、检查对象是否为空"><a href="#2、检查对象是否为空" class="headerlink" title="2、检查对象是否为空"></a>2、检查对象是否为空</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">isEmpty</span> = obj =&gt; <span class="title class_">Reflect</span>.<span class="title function_">ownKeys</span>(obj).<span class="property">length</span> === <span class="number">0</span> &amp;&amp; obj.<span class="property">constructor</span> === <span class="title class_">Object</span></span><br></pre></td></tr></table></figure><h3 id="3、等待一段时间再执行"><a href="#3、等待一段时间再执行" class="headerlink" title="3、等待一段时间再执行"></a>3、等待一段时间再执行</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">wait</span> = <span class="keyword">async</span> (<span class="params">milliseconds</span>) =&gt; <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> <span class="built_in">setTimeout</span>(resolve, milliseconds));</span><br></pre></td></tr></table></figure><h3 id="4、-获取两个日期之间的日差"><a href="#4、-获取两个日期之间的日差" class="headerlink" title="4、 获取两个日期之间的日差"></a>4、 获取两个日期之间的日差</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">daysBetween</span> = (<span class="params">date1, date2</span>) =&gt; <span class="title class_">Math</span>.<span class="title function_">ceil</span>(<span class="title class_">Math</span>.<span class="title function_">abs</span>(date1 - date2) / (<span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span>))</span><br></pre></td></tr></table></figure><h3 id="5、重定向到另一个-URL"><a href="#5、重定向到另一个-URL" class="headerlink" title="5、重定向到另一个 URL"></a>5、重定向到另一个 URL</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">redirect</span> = url =&gt; location.<span class="property">href</span> = url</span><br></pre></td></tr></table></figure><h3 id="6、检查设备上的触摸支持"><a href="#6、检查设备上的触摸支持" class="headerlink" title="6、检查设备上的触摸支持"></a>6、检查设备上的触摸支持</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">touchSupported</span> = (<span class="params"></span>) =&gt; (<span class="string">&#x27;ontouchstart&#x27;</span> <span class="keyword">in</span> <span class="variable language_">window</span> || <span class="title class_">DocumentTouch</span> &amp;&amp; <span class="variable language_">document</span> <span class="keyword">instanceof</span> <span class="title class_">DocumentTouch</span>)</span><br></pre></td></tr></table></figure><h3 id="7、-在元素后插入-HTML-字符串"><a href="#7、-在元素后插入-HTML-字符串" class="headerlink" title="7、 在元素后插入 HTML 字符串"></a>7、 在元素后插入 HTML 字符串</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">insertHTMLAfter</span> = (<span class="params">html, el</span>) =&gt; el.<span class="title function_">insertAdjacentHTML</span>(<span class="string">&#x27;afterend&#x27;</span>, html)</span><br></pre></td></tr></table></figure><h3 id="8、随机排列数组"><a href="#8、随机排列数组" class="headerlink" title="8、随机排列数组"></a>8、随机排列数组</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">shuffle</span> = arr =&gt; arr.<span class="title function_">sort</span>(<span class="function">() =&gt;</span> <span class="number">0.5</span> - <span class="title class_">Math</span>.<span class="title function_">random</span>())</span><br></pre></td></tr></table></figure><h3 id="9、在网页上获取选定的文本"><a href="#9、在网页上获取选定的文本" class="headerlink" title="9、在网页上获取选定的文本"></a>9、在网页上获取选定的文本</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">getSelectedText</span> = (<span class="params"></span>) =&gt; <span class="variable language_">window</span>.<span class="title function_">getSelection</span>().<span class="title function_">toString</span>()</span><br></pre></td></tr></table></figure><h3 id="10、获取随机布尔值"><a href="#10、获取随机布尔值" class="headerlink" title="10、获取随机布尔值"></a>10、获取随机布尔值</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">getRandomBoolean</span> = (<span class="params"></span>) =&gt; <span class="title class_">Math</span>.<span class="title function_">random</span>() &gt;= <span class="number">0.5</span></span><br></pre></td></tr></table></figure><h3 id="11、计算数组的平均值"><a href="#11、计算数组的平均值" class="headerlink" title="11、计算数组的平均值"></a>11、计算数组的平均值</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">average</span> = (<span class="params">arr</span>) =&gt; arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b) / arr.<span class="property">length</span></span><br></pre></td></tr></table></figure><h3 id="12、数组扁平化"><a href="#12、数组扁平化" class="headerlink" title="12、数组扁平化"></a>12、数组扁平化</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">flat</span> = arr =&gt; arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">pre,cur</span>) =&gt;</span> pre.<span class="title function_">concat</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>(cur)? <span class="title function_">flat</span>(cur): cur), [])</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JavaScript </tag>
            
            <tag> skill </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习React-dnd</title>
      <link href="/2022/07/27/react/react-dnd/"/>
      <url>/2022/07/27/react/react-dnd/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="用-React-Hooks-的方式使用-react-dnd"><a href="#用-React-Hooks-的方式使用-react-dnd" class="headerlink" title="用 React Hooks 的方式使用 react-dnd"></a>用 React Hooks 的方式使用 react-dnd</h1><h2 id="一、用-DndProvider-将根节点包裹起来"><a href="#一、用-DndProvider-将根节点包裹起来" class="headerlink" title="一、用 DndProvider 将根节点包裹起来"></a>一、用 DndProvider 将根节点包裹起来</h2><p>想要使用 react-dnd 进行拖拽操作，需要用 DndProvider 标签将根节点包裹起来，并传入一个 backend 参数： index.tsx 文件</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">DndProvider</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-dnd&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">HTMLBackend</span> <span class="keyword">from</span> <span class="string">&#x27;react-dnd-html5-backend&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./index.css&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">DndProvider</span> <span class="attr">backend</span>=<span class="string">&#123;</span> <span class="attr">HTMLBackend</span> &#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">App</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">DndProvider</span>&gt;</span></span>,</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br></pre></td></tr></table></figure><h2 id="二、让元素可以动起来"><a href="#二、让元素可以动起来" class="headerlink" title="二、让元素可以动起来"></a>二、让元素可以动起来</h2><ol><li>创建 Box 组件</li><li>让 Box 组件动起来</li></ol><p>就简单创建一个BOX组件，这里我们需要用到react-dnd的useDrag方法， 这里通过把第二参数赋值给ref，Box组件就能动起来，至于为什么，以后会给讲<br>源码</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">CSSProperties</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useDrag &#125; <span class="keyword">from</span> <span class="string">&#x27;react-dnd&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">style</span>: <span class="title class_">CSSProperties</span> = &#123;</span><br><span class="line">  <span class="attr">width</span>: <span class="number">200</span>,</span><br><span class="line">  <span class="attr">height</span>: <span class="number">50</span>,</span><br><span class="line">  <span class="attr">lineHeight</span>: <span class="string">&#x27;50px&#x27;</span>,</span><br><span class="line">  <span class="attr">background</span>: <span class="string">&#x27;pink&#x27;</span>,</span><br><span class="line">  <span class="attr">margin</span>: <span class="string">&#x27;30px auto&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Box</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> [, drager] = <span class="title function_">useDrag</span>(&#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;Box&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">  <span class="keyword">return</span> (<span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">&#123;drager&#125;</span> <span class="attr">style</span>=<span class="string">&#123;style&#125;</span>&gt;</span>可拖拽组件 Box<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Box</span>;</span><br></pre></td></tr></table></figure><h2 id="三、创建-Dustbin-组件用来接收-drag-组件"><a href="#三、创建-Dustbin-组件用来接收-drag-组件" class="headerlink" title="三、创建 Dustbin 组件用来接收 drag 组件"></a>三、创建 Dustbin 组件用来接收 drag 组件</h2><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">CSSProperties</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useDrop, <span class="title class_">DropTargetMonitor</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-dnd&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">style</span>: <span class="title class_">CSSProperties</span> = &#123;</span><br><span class="line">    <span class="attr">width</span>: <span class="number">400</span>,</span><br><span class="line">    <span class="attr">height</span>: <span class="number">400</span>,</span><br><span class="line">    <span class="attr">margin</span>: <span class="string">&#x27;100px auto&#x27;</span>,</span><br><span class="line">    <span class="attr">lineHeight</span>: <span class="string">&#x27;60px&#x27;</span>,</span><br><span class="line">    <span class="attr">border</span>: <span class="string">&#x27;1px dashed black&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Dustbin</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 第一个参数是 collect 方法返回的对象，第二个参数是一个 ref 值，赋值给 drop 元素</span></span><br><span class="line">    <span class="keyword">const</span> [collectProps, droper] = <span class="title function_">useDrop</span>(&#123;</span><br><span class="line">        <span class="comment">// accept 是一个标识，需要和对应的 drag 元素中 item 的 type 值一致，否则不能感应</span></span><br><span class="line">        <span class="attr">accept</span>: <span class="string">&#x27;Box&#x27;</span>,</span><br><span class="line">        <span class="comment">// collect 函数，返回的对象会成为 useDrop 的第一个参数，可以在组件中直接进行使用</span></span><br><span class="line">        <span class="attr">collect</span>: <span class="function">(<span class="params">minoter: DropTargetMonitor</span>) =&gt;</span> (&#123;</span><br><span class="line">            <span class="attr">isOver</span>: minoter.<span class="title function_">isOver</span>()</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">const</span> bg = collectProps.<span class="property">isOver</span> ? <span class="string">&#x27;deeppink&#x27;</span> : <span class="string">&#x27;white&#x27;</span>;</span><br><span class="line">    <span class="keyword">const</span> content = collectProps.<span class="property">isOver</span> ? <span class="string">&#x27;快松开，放到碗里来&#x27;</span> : <span class="string">&#x27;将 Box 组件拖动到这里&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="comment">// 将 droper 赋值给对应元素的 ref</span></span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">&#123;</span> <span class="attr">droper</span> &#125; <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">...style</span>, <span class="attr">background:</span> <span class="attr">bg</span> &#125;&#125;&gt;</span>&#123; content &#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Dustbin</span>;</span><br></pre></td></tr></table></figure><h2 id="四、效果图"><a href="#四、效果图" class="headerlink" title="四、效果图"></a>四、效果图</h2><p><img src="/img/react-dnd/image-20220727143704700.png" alt="image-20220727143704700"></p><h2 id="五、其它一些api"><a href="#五、其它一些api" class="headerlink" title="五、其它一些api"></a>五、其它一些api</h2><ul><li><p>drag 组件常用的属性：</p><ul><li>item：是一个对象，必须要有一个 type 属性</li><li>begin(mintor: DragSourceMonitor)：组件开始拖拽，必须返回一个对象包含 type 属性，会覆盖 item 属性返回的对象，会被传入 drop 组件 hover 和 drop 方法的第一个参数</li><li>end(item, mintor: DragSourceMonitor)： 组件停止拖拽时触发，item 是 drop 组件在 drop 方法执行时返回的对象，等同于 mintor.getDropResult() 的值</li></ul></li><li><p>drop 组件常用的属性</p><ul><li>accept：字符串，必须和对应 drag 组件的 item 属性中的 type 值一致</li><li>hover(item, minoter: DropTargetMonitor)：drag 组件在 drop 组件上方 hove 时触发</li><li>drop(item, minoter: DropTargetMonitor)：drag 组件拖拽结束后，放到 drop 组件时触发，返回的值会作为参数传递给 drag 组件 end 方法的第一个参数</li></ul></li><li><p>让组件既可以被拖拽也可以接收拖拽元素</p></li></ul><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useRef &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useDrag, useDrop &#125; <span class="keyword">from</span> <span class="string">&#x27;react-dnd&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Card</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> ref = useRef&lt;<span class="title class_">HTMLDivElement</span>&gt;(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> [, drop] = <span class="title function_">useDrop</span>(&#123;</span><br><span class="line">    <span class="attr">accept</span>: <span class="string">&#x27;Card&#x27;</span>,</span><br><span class="line">    <span class="title function_">drop</span>(<span class="params">item</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(item);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> [, drag] = <span class="title function_">useDrag</span>(&#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;Card&#x27;</span>,</span><br><span class="line">    <span class="attr">item</span>: &#123; <span class="attr">id</span>: <span class="string">&#x27;1&#x27;</span> &#125;,</span><br><span class="line">    <span class="title function_">end</span>(<span class="params">draggedItem, monitor</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(draggedItem, monitor);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 使用 drag 和 drop 包装 ref</span></span><br><span class="line">  <span class="title function_">drag</span>(<span class="title function_">drop</span>(ref));</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将变量 ref 传给元素的 ref 即可</span></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">&#123;ref&#125;</span>&gt;</span>既可以被拖动也可以接收拖动组件<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Card</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="一个更复杂的-Demo-演示"><a href="#一个更复杂的-Demo-演示" class="headerlink" title="一个更复杂的 Demo 演示"></a>一个更复杂的 Demo 演示</h2><p><img src="/img/react-dnd/%E6%8B%96%E6%8B%BD%E5%B9%B6%E6%8E%92%E5%BA%8F%E9%A2%84%E8%A7%88.gif" alt="demo"></p><p>Demo 地址</p><p><a href="https://github.com/kangkang123269/kate-demo/tree/main/react-dnd-hooks-demo">react-dnd-hooks-demo</a></p>]]></content>
      
      
      <categories>
          
          <category> react </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> react-dnd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Vue中使用keep-alive</title>
      <link href="/2022/07/27/vue/keep-alive/"/>
      <url>/2022/07/27/vue/keep-alive/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="在Vue中使用keep-alive"><a href="#在Vue中使用keep-alive" class="headerlink" title="在Vue中使用keep-alive"></a>在Vue中使用keep-alive</h1><h3 id="一、路由router添加meta配置"><a href="#一、路由router添加meta配置" class="headerlink" title="一、路由router添加meta配置"></a>一、路由router添加meta配置</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/keepalive&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;keepalive&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">()=&gt;</span><span class="title function_">import</span>(<span class="string">&#x27;../views/keepalive.vue&#x27;</span>),</span><br><span class="line">    <span class="attr">meta</span>: &#123;</span><br><span class="line">          <span class="attr">keepAlive</span>: <span class="literal">false</span> <span class="comment">//设置页面是否需要使用缓存</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="二、在Vue2-0的keep-alive的使用"><a href="#二、在Vue2-0的keep-alive的使用" class="headerlink" title="二、在Vue2.0的keep-alive的使用"></a>二、在Vue2.0的keep-alive的使用</h3><p>vue2.0中直接在你想要做缓存的位置，一般使用场景为配合router-view进行使用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;!-- vue2.<span class="property">x</span>配置 --&gt; </span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">keep-alive</span>&gt;</span> </span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">router-view</span> <span class="attr">v-if</span>=<span class="string">&quot;$route.meta.keepAlive&quot;</span> /&gt;</span> </span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span> </span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">router-view</span> <span class="attr">v-if</span>=<span class="string">&quot;!$route.meta.keepAlive&quot;</span>/&gt;</span></span> </span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h3 id="三、在Vue3-0的keep-alive的使用"><a href="#三、在Vue3-0的keep-alive的使用" class="headerlink" title="三、在Vue3.0的keep-alive的使用"></a>三、在Vue3.0的keep-alive的使用</h3><p>Vue3.0配合的slot插槽使用，使用is来绑定对应路由的组件。</p><blockquote><p>修改添加key值的绑定，如果不加key值无法实现页面缓存。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt; </span><br><span class="line">    &lt;!-- vue3<span class="number">.0</span>配置 --&gt; </span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">router-view</span> <span class="attr">v-slot</span>=<span class="string">&quot;&#123; Component &#125;&quot;</span>&gt;</span> </span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">keep-alive</span>&gt;</span> </span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;Component&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;$route.name&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;$route.meta.keepAlive&quot;</span>/&gt;</span> </span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span> </span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;Component&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;$route.name&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;!$route.meta.keepAlive&quot;</span>/&gt;</span> </span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span> </span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Vue </tag>
            
            <tag> 前端性能优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vite中配置路径别名</title>
      <link href="/2022/07/26/vite/vite%E4%B8%AD%E7%94%A8@%E5%88%AB%E5%90%8D/"/>
      <url>/2022/07/26/vite/vite%E4%B8%AD%E7%94%A8@%E5%88%AB%E5%90%8D/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="vite-中使用-，配置路径别名"><a href="#vite-中使用-，配置路径别名" class="headerlink" title="vite 中使用 @ ，配置路径别名"></a>vite 中使用 @ ，配置路径别名</h1><p>vite 加 vue3 项目中报错<code>Cannot find module &#39;XXXXXX ’ or its corresponding type declarations</code></p><p>我们只需要在以下几个文件里面配置：</p><p><strong>vite.config.ts</strong>:</p><p>注意这里用了 node 的 path 模块需要执行<code>npm i --save-dev @types/node</code>命令</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&quot;vite&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">&quot;@vitejs/plugin-vue&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="title function_">vue</span>()],</span><br><span class="line">  <span class="attr">define</span>: &#123;</span><br><span class="line">    <span class="string">&quot;process.env&quot;</span>: &#123;&#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">resolve</span>: &#123;</span><br><span class="line">    <span class="comment">// 配置路径别名</span></span><br><span class="line">    <span class="attr">alias</span>: &#123;</span><br><span class="line">      <span class="string">&quot;@&quot;</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;./src&quot;</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>tsconfig.json</strong>：</p><p>配置 baseUrl，paths</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;esnext&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;useDefineForClassFields&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;esnext&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;moduleResolution&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;strict&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;jsx&quot;</span><span class="punctuation">:</span> <span class="string">&quot;preserve&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;sourceMap&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;resolveJsonModule&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;esModuleInterop&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lib&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;esnext&quot;</span><span class="punctuation">,</span> <span class="string">&quot;dom&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;baseUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;.&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;paths&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;@/*&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;src/*&quot;</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;include&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;src/**/*.ts&quot;</span><span class="punctuation">,</span> <span class="string">&quot;src/**/*.d.ts&quot;</span><span class="punctuation">,</span> <span class="string">&quot;src/**/*.tsx&quot;</span><span class="punctuation">,</span> <span class="string">&quot;src/**/*.vue&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>大工告成啦！接下来可以用@别名代表 src 的绝对路径</p>]]></content>
      
      
      <categories>
          
          <category> Vue3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 项目 </tag>
            
            <tag> Vue </tag>
            
            <tag> vite </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
